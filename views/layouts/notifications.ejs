<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notifications</title>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel='stylesheet'
        integrity='sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65' crossorigin='anonymous'>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

</head>

<body>
    <div class="container">
        <h1>การแจ้งเตือน</h1>
        <button class="btn btn-danger mb-3" onclick="clearNonInvitationNotifications()">
            ล้างการแจ้งเตือนที่ไม่ได้รับคำเชิญทั้งหมด 
        </button>

        <ul id="notifications-list" class="list-group">
            <% notifications.forEach(notification => { %>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <% if (notification.type === 'invitation') { %>
                            <p>คุณได้รับคำเชิญให้เข้าร่วมโปรเจกต์ชื่อ <%= notification.space.SpaceName %></p>
                            <button class="accept-btn" data-id="<%= notification._id %>">ตอบรับ</button>
                            <button class="reject-btn" data-id="<%= notification._id %>">ปฎิเสธ</button>
                        <% } 
                            else if (notification.type==='roleChange' ) { %>
                                <p>
                                    บทบาทของคุณใน <%= notification.space.SpaceName %> ได้ถูกเปลี่ยนเป็น 
                                    <%= notification.role %> โดย <%= notification.leader.username %>
                                </p>
                        <% } 
                            else if (notification.type==='removal' ) { %>
                                <p>
                                    คุณถูกลบออกจาก <%= notification.space.SpaceName %> 
                                    โดย <%= notification.leader.username %>
                                </p>
                        <% } 
                            else if (notification.type==='memberAdded' ) { %>
                                <p>
                                    <%= notification.leader.username %> ได้เข้าร่วม 
                                    <%= notification.space.SpaceName %> มีหน้าที่เป็น <%= notification.role %>
                                </p>
                        <% } 
                            else if (notification.type === 'taskAssignment') { %>
                                <p>
                                    <%= notification.message %> <br>
                                    
                                    กำหนดส่งวันที่: <%= notification.task && notification.task.dueDate ? moment(notification.task.dueDate).format('DD MMMM YYYY') : 'No due date' %>
                                    <br>
                                    <i class="fa-solid fa-hand-point-right"></i>
                                    <% if (notification.task && notification.task._id) { %>
                                        <a href="/task/<%= notification.task._id %>/detail?spaceId=<%= notification.space._id %>">ดูรายละเอียดงาน</a>
                                    <% } else { %>
                                        <span>No task details available</span>
                                    <% } %>
                                    
                                </p>
                        <% } 
                        else if (notification.type === 'subtaskAssignment') { %>
                            <p>
                                <%= notification.message %> <br>
                                <% if (notification.subTask && notification.subTask.task && notification.subTask.task.space) { %>
                                    ในโปรเจค: <%= notification.subTask.task.space.SpaceName %> <br>
                                    งานหลัก: <%= notification.subTask.task.taskName %> <br>
                                    กำหนดส่งวันที่: <%= moment(notification.subTask.subTask_dueDate).format('DD MMMM YYYY') %> <br>
                                <% } else { %>
                                    ข้อมูลงานหรือโปรเจคไม่พร้อมใช้งาน <br>
                                <% } %>
                            </p>
                        <% } 
                        else if (notification.type==='announcement' ) { %>
                            <p>
                                <%= notification.announcement.title %>
                            </p>
                            <a href="/announcement/<%= notification.announcement._id %>" class="btn btn-primary btn-sm"> ดูประกาศ </a>
                            <% if (notification.announcement.expirationDate) { %>
                                <small class="text-muted">Expiration Date:
                                    <%= moment(notification.announcement.expirationDate).format('DD/MM/YYYY') %>
                                </small>
                            <% } %>
                        <% } %>

                        <small class="text-muted">
                            แจ้งเตือนเมื่อ <br>
                            วันที่: <%= notification.formattedDate %> | 
                            เวลา: <%= notification.formattedTime %> น.
                        </small>
                    </div>
                    <button class="btn btn-danger btn-sm" onclick="deleteNotification('<%= notification._id %>')">
                        <i class='bx bx-trash'></i>
                    </button>
                </li>
            <% }) %>
        </ul>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.accept-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const notificationId = e.target.getAttribute('data-id');
                    try {
                        const response = await fetch(`/notification/accept/${notificationId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                notificationId,
                                response: 'accepted'  // Or 'rejected' depending on the user's action
                            })
                        });
                        if (!response.ok) {
                            throw new Error('Failed to accept the invitation');
                        }
        
                        const data = await response.json();
                        console.log('Data:', data); 

                        if (data.success) {
                            e.target.disabled = true;
                            e.target.nextElementSibling.disabled = true;  // Disables the reject button (if available)
                            e.target.parentElement.querySelector('p').textContent = "ตอบรับคำเชิญเรียบร้อย";
                            setTimeout(() => location.reload(), 500); // Reloads after 500 ms
                        } else {
                            alert('Failed to accept the invitation');
                        }
                    } catch (error) {
                        console.error('Error accepting invitation:', error);
                        alert('Internal Server Error');
                    }
                });
            });

            document.querySelectorAll('.reject-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const notificationId = e.target.getAttribute('data-id');
        
                    try {
                        const response = await fetch(`/notification/reject/${notificationId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        });
        
                        const data = await response.json();
                        if (data.success) {
                            // Update the UI to reflect the rejection
                            e.target.disabled = true;
                            e.target.previousElementSibling.disabled = true;
                            e.target.parentElement.querySelector('p').textContent = "ปฎิเสทคำเชิญเรียบร้อย";
                            setTimeout(() => {
                                location.reload();
                            }, 500);
                        } else {
                            alert('Failed to reject the invitation');
                        }
                    } catch (error) {
                        console.error('Error rejecting invitation:', error);
                        alert('Internal Server Error');
                    }
                });
            });
        });

        async function deleteNotification(notificationId) {
            try {
                const res = await fetch(`/notifications/${notificationId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await res.json();
                if (res.ok) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Error deleting notification:', error);
                alert('An error occurred while deleting the notification.');
            }
        }

        async function clearNonInvitationNotifications() {
            try {
                const res = await fetch('/notifications/clear-non-invitation', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await res.json();
                if (res.ok) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Error clearing notifications:', error);
                alert('An error occurred while clearing the notifications.');
            }
        }

        // Function to check for expired announcements
        function checkForExpiredAnnouncements() {
            const notificationList = document.getElementById('notificationList');
            const listItems = notificationList.querySelectorAll('li[data-expiration]');

            listItems.forEach(listItem => {
                const expirationDateISO = listItem.dataset.expiration;
                const expirationDate = new Date(expirationDateISO);

                if (expirationDate < new Date()) {
                    notificationList.removeChild(listItem);
                }
            });
        }

        // Call checkForExpiredAnnouncements initially and then every minute
        checkForExpiredAnnouncements();
        setInterval(checkForExpiredAnnouncements, 60000);
    </script>
</body>
</html>
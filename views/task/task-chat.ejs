<script src="/socket.io/socket.io.js"></script>
<style>
  body {
    background-color: #f7f7f7;
  }

  .chat-container {
    max-width: 80%;
    margin: 20px auto;
    display: flex;
    border: #ebebeb solid 1px;
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / .1), 0 8px 10px -6px rgb(0 0 0 / .1);
    border-radius: 16px;
    background-color: #ffffff;
  }

  .chat-seccon {
    display: flex;
    width: -webkit-fill-available;
  }

  .chat-container .chat-head {
    min-width: 50px;
    display: flex;
    border-bottom: #efefef 1px solid;
  }

  .chat-container .chat-formsubmit {
    border-top: #efefef 1px solid;
  }

  .chat-container #chat-sec1 {
    background-color: #f8f8f8;
    padding: 15px;
    height: 360px;
  }

  .chat-container #chat-sec {
    padding: 16px;
  }

  .chatgroupname {
    margin-left: 10px;
  }

  .messages {
    height: 100%;
    overflow-y: auto;
  }

  .message {
    margin-bottom: 10px;
    display: flex;
    align-items: flex-end;
  }

  .message.current-user {
    justify-content: flex-end;
  }

  .message.other-user {
    justify-content: flex-start;
  }

  .message-bubble {
    max-width: 70%;
    padding: 10px;
    border-radius: 10px;
    position: relative;
    word-wrap: break-word;
    overflow-wrap: break-word;
    white-space: normal;
  }

  .message-bubble #chat-nameuser {
    font-size: 14px;
    color: #374151;
  }

  .message.current-user .message-bubble {
    background-color: #007bff;
    color: white;
    margin-left: auto;
  }

  .message.other-user .message-bubble {
    background-color: #f1f1f1;
    color: black;
    margin-right: auto;
  }

  .message-time {
    font-size: 0.8em;
    color: #666;
    margin-top: 5px;
    text-align: right;
  }

  .date-divider {
    text-align: center;
    margin: 10px 0;
    color: #666;
    font-size: 0.9em;
    font-weight: bold;
  }

  .avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    margin-right: 10px;
  }

  .chat-form {
    display: flex;
    gap: 0.5rem;
  }

  .chat-form input {
    font-size: 14px;
    flex: 1;
    padding: 10px;
    border: #cecece solid 1px;
    border-radius: 20px;
  }

  .chat-form button {
    margin-right: 20px;
    padding: 10px 20px;
    background-color: #007bff;
    border-radius: 100px;
    border: 1px solid #007bff;
  }

  .user-search-results {
    position: absolute;
    background: white;
    border: 1px solid #ddd;
    max-height: 150px;
    overflow-y: auto;
    z-index: 1000;
    width: 300px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin-top: 5px;
    bottom: 70px;
  }

  .user-list {
    width: 50%;
    list-style: none;
    padding: 0;
    margin: 0;
    border-right: #efefef 1px solid;
  }

  .headuser-list {
    padding: 16px;
    display: flex;
    justify-content: space-between;
  }

  .headuser-list h2 {
    font-size: 18px;
    margin: 0;
    align-self: center;
  }

  .headuser-list button {
    font-size: 20px;
    border: none;
    background-color: #ffffff;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 100px;
  }

  .headuser-list button:hover {
    background-color: rgb(243, 244, 246);
  }

  .user-list ul {
    list-style-type: none;
    padding: 8px;
  }

  .user-list li {
    margin-top: 5px;
    padding: 12px;
    border-radius: 12px;
    cursor: pointer;
    width: 100%;
  }

  .user-list li:hover {
    background-color: #f1f1f1;
  }

  .user-list a {
    display: flex;
    align-items: center;
    width: 100%;
    gap: 0.75rem;
    text-decoration: none;
  }

  .conmessage {
    width: 100%;
    display: flex;
    justify-content: space-between;
  }


  .user-list .profileimage-chat {
    width: 2.5rem;
    height: 2.5rem;
    object-fit: cover;
    border-radius: 100%;
  }

  .btn-new-message {
    position: relative;
    height: 0;
  }

  .new-message-btn {
    position: absolute;
    right: 50%;
    bottom: 70px;
    z-index: 999;
    width: 40px;
    height: 40px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }

  .new-message-btn.show {
    opacity: 1;
    visibility: visible;
  }

  .new-message-btn i {
    font-size: 20px;
  }

  .chat-formsubmit {
    position: relative;
    z-index: 1000;
  }

  .read-status,
  .message.current-user .message-time {
    color: rgb(219 234 254);
  }

  .name-chat {
    font-weight: 500;
  }

  .notimesaage {
    justify-self: center;
  }

  .all-chat {
    min-height: 400px;
    max-height: 410px;
    overflow-y: auto;
  }

  .nameconuser .nameuser {
    font-size: 16px;
    font-weight: 500;
    color: #020817;
  }

  .nameconuser .conuser {
    width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    font-size: 14px;
    color: #111827b3;
  }

  .timenotimessage .timemessage {
    font-size: 12px;
    color: #6B7280;
  }

  .user-list li.active {
    background-color: #f1f1f1;
  }

  .user-list li.active:hover {
    background-color: #f1f1f1;
  }

  .notimesaage {
    background-color: #3b82f6;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: none;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: 600;
    margin-top: 2px;
  }


  .user-list li.unread .nameuser {
    font-weight: 600;
    color: #1a1a1a;
  }

  .user-list li.unread .conuser {
    color: #111827;
    font-weight: 500;
  }

  .search-allchat {
    padding: 0 16px;
  }

  .search-allchat #searchChatInput {
    width: 100%;
    padding: 8px 12px;
    margin: 8px 0;
    border: 1px solid #ddd;
    border-radius: 20px;
    font-size: 14px;
  }

  .chat-secright #groupname {
    font-size: 16px;
    font-weight: 500;
  }

  .chat-secright .profileimage-chat {
    object-fit: cover;
    border-radius: 100%;
    width: 2.5rem;
    height: 2.5rem;
  }

  .chat-secright {
    transition: flex 0.3s ease;
    width: 100%;
    height: 100%;
  }

  .user-list.collapsed {
    width: 80px;
    transition: width 0.3s ease;
    position: relative;
  }

  .user-list.collapsed .search-allchat {
    display: none;
  }

  .user-list.collapsed .all-chat li a {
    justify-content: center;
    padding: 8px;
    margin-top: 5px;
  }

  .user-list.collapsed .all-chat li .conmessage {
    display: none;
  }

  .user-list.collapsed .all-chat li {
    padding: 0;
    margin: 0;
  }

  .user-list.collapsed .all-chat li img {
    width: 40px;
    height: 40px;
  }

  .user-list.collapsed .all-chat li.active {
    background-color: #f1f1f1;
  }

  .user-list.collapsed .headuser-list {
    position: relative;
    top: 0;
    left: 0;
    width: 100%;
    padding: 16px;
    display: flex;
    justify-content: center;
    background-color: white;
    z-index: 10;
    border-top-left-radius: 20px;
  }

  .user-list.collapsed .headuser-list h2 {
    display: none;
  }

  .user-list.collapsed .headuser-list button {
    margin: 0 auto;
  }

  .headuser-list button i {
    transition: transform 0.3s ease;
  }

  .user-list.collapsed .headuser-list button i {
    transform: rotate(180deg);
  }

  .date-divider {
    text-align: center;
    margin: 1.5rem 0;
    position: relative;
  }

  .date-divider::before,
  .date-divider::after {
    content: "";
    position: absolute;
    top: 50%;
    width: 45%;
    height: 1px;
    background-color: #efefef;
  }

  .date-divider::before {
    left: 0;
  }

  .date-divider::after {
    right: 0;
  }

  .message-date {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    background-color: #f3f4f6;
    color: #6b7280;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 9999px;
    position: relative;
    z-index: 1;
  }

  .forminput-chat {
    display: flex;
    margin: 0;
    height: 100%;
    gap: 0.5rem;
    width: 100%;
  }

  .chaticon {
    display: flex;
    margin: 0;
    height: 100%;
    gap: 0.5rem;
  }

  .chat-formsubmit #icon-chat {
    display: flex;
    padding: 10px;
    justify-content: center;
    font-size: 27px;
    cursor: pointer;
    border-radius: 9999px;
    color: #5c6274;
  }

  .chat-formsubmit #icon-chat:hover {
    background-color: #f4f4f4;
    color: #020817;
  }

  .showimgfile-chat {
    position: absolute;
    bottom: 70px;
    left: 0;
    right: 0;
    background-color: white;
    padding: 12px;
    border-radius: 12px;
    box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
    z-index: 1001;
    max-height: 220px;
    overflow-x: auto;
    display: none;
    border: 1px solid #e5e7eb;
  }

  .file-list {
    display: flex;
    flex-direction: row;
    gap: 12px;
  }

  .file-item {
    background-color: #f9fafb;
    border-radius: 10px;
    border: 1px solid #e5e7eb;
    padding: 10px;
    transition: all 0.2s ease;
  }

  .file-item:hover {
    background-color: #f3f4f6;
  }

  .file-content {
    width: 210px;
    display: block;
    align-items: center;
  }

  .image-preview {
    width: 100%;
    border-radius: 6px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f3f4f6;
  }

  .image-preview img {
    width: 100%;
    height: 100px;
    object-fit: cover;
  }

  .file-icon-container {
    font-size: 48px;
    color: #4b5563;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100px;
  }

  .chat-form .remove-file {
    margin-right: 20px;
    padding: 10px;
    background-color: #dc3545;
    border-radius: 100px;
    border: 1px solid #dc3545;
    color: #ffff;
  }

  .file-info {
    flex: 1;
    min-width: 0;
  }

  .file-name {
    font-size: 14px;
    font-weight: 500;
    color: #111827;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: 4px;
  }

  .file-meta {
    display: flex;
    gap: 8px;
    font-size: 12px;
    color: #6b7280;
  }

  .file-size {
    color: #6b7280;
  }

  .remove-file {
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    font-size: 18px;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .remove-file:hover {
    background-color: #f3f4f6;
    color: #dc2626;
  }

  /* สไตล์ไอคอนไฟล์ประเภทต่างๆ */
  .bx-file {
    color: #6b7280;
  }

  .bxs-file-pdf {
    color: #ef4444;
  }

  .bxs-file-doc {
    color: #2563eb;
  }

  .bxs-file-xls {
    color: #16a34a;
  }

  #imageModal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.8);
    z-index: 10000;
  }

  #imageModal .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  #imageModal .modal-content {
    position: relative;
    background: white;
    padding: 10px;
    border-radius: 8px;
    max-width: 90%;
    max-height: 90%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  #imageModal img {
    max-width: 100%;
    max-height: 80vh;
    border-radius: 8px;
  }
</style>
</head>

<body>
  <%- include('../task/task_component/task-navbar.ejs') %>
    <div class="chat-container">
      <div class="chat-seccon">
        <%- include('./task-chat/task-chatpartials.ejs') %>
          <div class="chat-secright">
            <div class="chat-head" id="chat-sec">
              <img class="profileimage-chat" src="<%= spaces.projectCover %>" alt="Group Chat">
              <div class="chatgroupname">
                <span id="groupname">แชทกลุ่ม <%= spaces.projectName %></span>
                <div class="all-member"></div>
              </div>
            </div>
            <div class="chat-con" id="chat-sec1">
              <div class="messages" id="messages">
                <% let previousDate=null; %>
                  <% messages.forEach((msg)=> { %>
                    <% const messageDate=new Date(msg.createdAt); %>
                      <% if (previousDate===null || isNewDay(previousDate, messageDate)) { %>
                        <!-- แสดงวันที่เมื่อเปลี่ยนวัน -->
                        <div class="date-divider">
                          <div class="message-date">
                            <%= formatDate(messageDate) %>
                          </div>
                        </div>
                        <% } %>
                          <% previousDate=messageDate; %>
                            <div
                              class="message <%= msg.userId && msg.userId._id && msg.userId._id.toString() === user._id.toString() ? 'current-user' : 'other-user' %>"
                              data-message-id="<%= msg._id %>">

                              <% if (msg.userId && msg.userId._id && msg.userId._id.toString() !==user._id.toString()) {
                                %>
                                <img src="<%= msg.userId.profileImage || '/path/to/default/avatar.png' %>" alt="User"
                                  class="avatar">
                                <% } %>

                                  <div class="message-bubble">
                                    <% if (msg.userId && msg.userId._id.toString() !==user._id.toString()) { %>
                                      <div id="chat-nameuser">
                                        <%= msg.userId.firstName %>
                                          <%= msg.userId.lastName %>
                                      </div>
                                      <% } %>
                                        <%= msg.message %>
                                          <div class="message-time">
                                            <%= formatTime(messageDate) %>
                                              <% if (msg.userId && msg.userId._id &&
                                                msg.userId._id.toString()===user._id.toString()) { %>
                                                <span class="read-status">เห็นแล้ว: <%= msg.readBy.length %> คน</span>
                                                <% } %>
                                          </div>
                                  </div>
                            </div>

                            <% }); %>
              </div>
              <div class="user-search-results" id="userSearchResults" style="display: none;">
                <ul class="user-list"></ul>
              </div>
            </div>
            <div class="btn-new-message">
              <button class="new-message-btn">
                <i class='bx bxs-chevron-down'></i>
              </button>
            </div>
            <div class="chat-formsubmit" id="chat-sec">
              <form class="chat-form" id="chatForm">
                <div class="showimgfile-chat">
                  <!-- ไฟล์ที่เลือกจะแสดงที่นี่ -->
                </div>
                <div class="forminput-chat">
                  <div class="chaticon">
                    <div class="chat-img" id="icon-chat" title="เพิ่มรูปภาพ"><i class='bx bx-image-alt'></i></div>
                    <div class="chat-file" id="icon-chat" title="เพิ่มไฟล์"><i class='bx bx-paperclip'></i></div>
                  </div>
                  <input type="text" id="messageInput" name="message" placeholder="พิมพ์ข้อความ..." required
                    autocomplete="off">
                  <button type="submit"><i class='bx bx-send' style='color:#ffffff'></i></button>
                </div>
              </form>
            </div>
          </div>
      </div>
    </div>

    <script>
      // ฟังก์ชันค้นหาชื่อแชท
      document.getElementById('searchChatInput').addEventListener('input', function (e) {
        const searchTerm = e.target.value.toLowerCase();
        const chatItems = document.querySelectorAll('.all-chat li');

        chatItems.forEach(item => {
          const chatName = item.querySelector('.nameuser').textContent.toLowerCase();
          if (chatName.includes(searchTerm)) {
            item.style.display = 'flex';
          } else {
            item.style.display = 'none';
          }
        });
      });

      // เพิ่มสไตล์ CSS สำหรับการค้นหา
      const style = document.createElement('style');
      style.textContent = `
        .search-chatmember {
          padding: 0 16px;
          margin-bottom: 8px;
        }
        .search-chatmember input:focus {
          outline: none;
          border-color: #007bff;
          box-shadow: 0 0 0 2px rgba(0,123,255,.25);
        }
      `;
      document.head.appendChild(style);
    </script>

    <script>
      // เมื่อโหลดหน้าเว็บเสร็จ
      document.addEventListener('DOMContentLoaded', () => {
        // ตรวจสอบ URL ปัจจุบันเพื่อกำหนด active item
        const path = window.location.pathname;
        const chatItems = document.querySelectorAll('.user-list li');

        chatItems.forEach(item => {
          // ลบคลาส active ออกจากทั้งหมดก่อน
          item.classList.remove('active');

          // ตรวจสอบว่าเป็นลิงก์ปัจจุบันหรือไม่
          const link = item.querySelector('a');
          if (link && link.getAttribute('href') === path) {
            item.classList.add('active');
          }
        });
      });

      // เมื่อคลิกที่รายการแชท
      document.querySelectorAll('.user-list li').forEach(item => {
        item.addEventListener('click', function () {
          // ลบคลาส active ออกจากทั้งหมด
          document.querySelectorAll('.user-list li').forEach(li => {
            li.classList.remove('active');
          });

          // เพิ่มคลาส active ให้กับรายการที่คลิก
          this.classList.add('active');
        });
      });
    </script>

    <script>
      // ฟังก์ชันสำหรับจัดรูปแบบเวลาเป็น PM/AM
      function formatTime(date) {
        let hours = date.getHours();
        let minutes = date.getMinutes();
        const ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // ชั่วโมง 0 จะเป็น 12 AM
        minutes = minutes < 10 ? '0' + minutes : minutes;
        return `${hours}:${minutes} ${ampm}`;
      }

      // ฟังก์ชันสำหรับตรวจสอบการเปลี่ยนวัน
      function isNewDay(date1, date2) {
        return (
          date1.getFullYear() !== date2.getFullYear() ||
          date1.getMonth() !== date2.getMonth() ||
          date1.getDate() !== date2.getDate()
        );
      }

      // ฟังก์ชันสำหรับจัดรูปแบบวันที่
      function formatDate(date) {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        return date.toLocaleDateString('th-TH', options);
      }
    </script>

    <script>
      const messagesContainer = document.getElementById("messages");
      const newMessageButton = document.querySelector('.new-message-btn');
      const chatSecRight = document.querySelector('.chat-secright');

      let userScrolledUp = false;
      let lastScrollPosition = localStorage.getItem('lastScrollPosition') || messagesContainer.scrollHeight;

      messagesContainer.scrollTop = lastScrollPosition;
      function checkScrollPosition() {
        const nearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop <= messagesContainer.clientHeight + 50;
        if (!nearBottom) {
          newMessageButton.classList.add("show");
        } else {
          newMessageButton.classList.remove("show");
        }
      }

      messagesContainer.addEventListener("scroll", checkScrollPosition);

      newMessageButton.addEventListener("click", () => {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        newMessageButton.classList.remove("show");
      });

      // บันทึกตำแหน่งการเลื่อนเมื่อผู้ใช้เปลี่ยนแท็บหรือปิดหน้าต่าง
      document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === 'hidden') {
          sessionStorage.setItem('lastScrollPosition', messagesContainer.scrollTop);
        } else {
          messagesContainer.scrollTop = sessionStorage.getItem('lastScrollPosition') || messagesContainer.scrollHeight;
        }
      });

      window.addEventListener("beforeunload", () => {
        sessionStorage.setItem('lastScrollPosition', messagesContainer.scrollTop);
      });

      const saveScrollPosition = () => {
        sessionStorage.setItem('lastScrollPosition', messagesContainer.scrollTop);
      };

      document.addEventListener("visibilitychange", saveScrollPosition);
      window.addEventListener("beforeunload", saveScrollPosition);


      newMessageButton.addEventListener("click", () => {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        newMessageButton.classList.remove("show");
      });

      // เมื่อเชื่อมต่อกับ Socket.io
      socket.on('connect', () => {
        console.log('Connected to Socket.io server');
        // ส่งข้อมูลผู้ใช้ที่อยู่ในหน้าแชทไปยังเซิร์ฟเวอร์
        socket.emit('user in chat', { userId: '<%= user._id %>', spaceId: '<%= spaces._id %>' });
      });

      document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          socket.emit('user returned to chat', { userId: '<%= user._id %>', spaceId: '<%= spaces._id %>' });
          messagesContainer.scrollTop = sessionStorage.getItem('lastScrollPosition') || messagesContainer.scrollHeight;
        } else {
          socket.emit('user left chat', { userId: '<%= user._id %>', spaceId: '<%= spaces._id %>' });
        }
      });

      // รับข้อความใหม่จากเซิร์ฟเวอร์
      socket.on('chat message', (msg) => {
        const messages = document.querySelector('.messages');
        const messageDate = new Date(msg.createdAt);

        // ตรวจสอบการเปลี่ยนวัน
        const lastMessage = messages.lastElementChild;
        if (lastMessage && lastMessage.classList.contains('message')) {
          const lastMessageDate = new Date(lastMessage.dataset.timestamp);
          if (isNewDay(lastMessageDate, messageDate)) {
            // แสดงวันที่เมื่อเปลี่ยนวัน
            const dateDivider = document.createElement('div');
            dateDivider.classList.add('date-divider');
            dateDivider.textContent = formatDate(messageDate);
            messages.appendChild(dateDivider);
          }
        }

        // สร้าง element สำหรับข้อความใหม่
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', msg.userId._id === '<%= user._id %>' ? 'current-user' : 'other-user');
        messageElement.dataset.messageId = msg._id;
        messageElement.dataset.timestamp = msg.createdAt;

        // กำหนดเนื้อหาของข้อความ
        messageElement.innerHTML = msg.userId._id !== '<%= user._id %>' ? `
        <img src="${msg.userId.profileImage}" alt="User" class="avatar">
        <div class="message-bubble">
          <strong>${msg.userId.firstName} ${msg.userId.lastName}:</strong> ${msg.message}
          <div class="message-time">${formatTime(messageDate)}</div>
          </div>
          ` : `
          <div class="message-bubble">${msg.message}
            <div class="message-time">${formatTime(messageDate)}
              <span class="read-status">เห็นแล้ว: ${msg.readBy.length} คน</span>
            </div>
          </div>
          `;
        // เพิ่มข้อความใหม่เข้าไปใน container
        messagesContainer.appendChild(messageElement);
        if (!userScrolledUp) {
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
          localStorage.setItem('lastScrollPosition', messagesContainer.scrollTop);
        }
      });

      // อัปเดตจำนวนผู้ใช้ที่เห็นข้อความเมื่อได้รับข้อมูลจากเซิร์ฟเวอร์
      socket.on('message read update', (data) => {
        const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
        if (messageElement) {
          const readStatusElement = messageElement.querySelector('.read-status');
          if (readStatusElement) {
            readStatusElement.textContent = `เห็นแล้ว: ${data.readByCount} คน`;
          }
        }
      });
    </script>

    <script>
      const messageInput = document.getElementById('messageInput');
      const userSearchResults = document.getElementById('userSearchResults');
      const userList = document.querySelector('.user-list');

      let selectedUsers = []; // เก็บผู้ใช้ที่ถูกเลือก
      let isSending = false; // ตัวแปรตรวจสอบสถานะการส่งข้อความ

      // ฟังก์ชันค้นหาผู้ใช้
      async function searchUsers(query) {
        try {
          const spaceId = '<%= spaces._id %>'; // ใช้ spaceId จาก EJS
          const response = await fetch(`/space/${spaceId}/search-users?query=${query}`);
          const data = await response.json();
          if (data.success) {
            displayUserResults(data.users);
          }
        } catch (error) {
          console.error('Error searching users:', error);
        }
      }

      // ฟังก์ชันแสดงผลผู้ใช้ที่ค้นหาได้
      function displayUserResults(users) {
        userList.innerHTML = ''; // ล้างผลลัพธ์เก่า
        users.forEach(user => {
          // ตรวจสอบอีกครั้งว่า user ไม่ใช่ตัวเอง (เพื่อความปลอดภัย)
          if (user._id.toString() !== '<%= user._id %>') {
            const li = document.createElement('li');
            li.innerHTML = `
            <img src="${user.profileImage || '/img/profileImage/Profile.jpeg'}" alt="User" class="avatar" style="width: 20px; height: 20px;">
            <span>${user.firstName} ${user.lastName}</span>
            `;
            li.dataset.userId = user._id; // เก็บ userid ใน dataset
            li.addEventListener('click', () => selectUser(user));
            userList.appendChild(li);
          }
        });
        userSearchResults.style.display = 'block';
      }

      // ฟังก์ชันเลือกผู้ใช้
      function selectUser(user) {
        if (!selectedUsers.some(u => u._id === user._id)) {
          selectedUsers.push(user);
          updateMessageInput();
        } else {
          console.log(`${user.firstName} ถูกเลือกไปแล้ว!`);
        }
        userSearchResults.style.display = 'none';
      }

      function syncSelectedUsersWithInput() {
        selectedUsers = selectedUsers.filter(user => {
          const userTag = `@${user.firstName} ${user.lastName}`;
          return messageInput.value.includes(userTag);
        });
      }


      // ฟังก์ชันอัปเดต input ข้อความ
      function updateMessageInput() {
        const userTags = selectedUsers.map(user => `@${user.firstName} ${user.lastName}`).join(' ');
        messageInput.value = userTags + ' ';
        messageInput.focus(); // ให้ focus กลับไปที่ input หลังจากอัปเดต
      }

      // ฟังก์ชันตรวจสอบเมื่อผู้ใช้พิมพ์
      // ฟังก์ชัน sync selectedUsers กับ messageInput
      function syncSelectedUsersWithInput() {
        selectedUsers = selectedUsers.filter(user => {
          const userTag = `@${user.firstName} ${user.lastName}`;
          return messageInput.value.includes(userTag);
        });
      }

      messageInput.addEventListener('input', (e) => {
        const value = e.target.value.trim();
        const atIndex = value.lastIndexOf('@');

        syncSelectedUsersWithInput();

        if (atIndex !== -1) {
          const query = value.slice(atIndex + 1).trim();
          if (query.length > 0) {
            searchUsers(query);
          } else {
            searchUsers('');
          }
        } else {
          userSearchResults.style.display = 'none';
        }
      });

      messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace') {
          setTimeout(() => {
            syncSelectedUsersWithInput(); // ✅ sync หลังจาก backspace
          }, 0);
        }
      });

      // ฟังก์ชันส่งข้อความ
      document.querySelector('.chat-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (isSending) return;

        const message = messageInput.value; // ไม่ใช้ trim() เพื่อรักษาช่องว่าง

        // Check if message is empty or contains only whitespace
        if (!message || !message.replace(/\s/g, '').length) {
          return; // Don't send empty message or message with only spaces
        }

        isSending = true;

        const spaceId = '<%= spaces._id %>';
        const userId = '<%= user._id %>';

        const mentionedUserIds = selectedUsers.map(user => user._id);
        console.log('Mentioned Users:', mentionedUserIds);

        try {
          const response = await fetch(`/space/item/${spaceId}/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              message, // ส่งข้อความตามที่ผู้ใช้พิมพ์ (รวมช่องว่าง)
              mentionedUsers: mentionedUserIds,
              type: 'group'
            }),
          });
          if (response.ok) {
            messageInput.value = '';
            selectedUsers = [];
          } else {
            console.error('Failed to send message');
          }
        } catch (error) {
          console.error('Error sending message:', error);
        } finally {
          isSending = false;
        }
      });
      // เมื่อผู้ใช้ถูก mention
      socket.on('new mention', (data) => {
        alert(`คุณถูก mention โดย ${data.mentionedBy} ในโปรเจกต์ ${data.projectName}: ${data.message}`);
      });

      // ตรวจจับเหตุการณ์ keydown บน messageInput
      messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace') {
          const value = messageInput.value;
          const cursorPosition = messageInput.selectionStart;

          // เช็คว่าตำแหน่งเคอร์เซอร์อยู่หลัง Mention พอดีหรือเปล่า
          for (const user of selectedUsers) {
            const mentionText = `@${user.firstName} ${user.lastName}`;
            const mentionEnd = value.indexOf(mentionText) + mentionText.length;

            // เคอร์เซอร์อยู่หลัง Mention พอดี และไม่มีข้อความตามหลัง
            if (cursorPosition === mentionEnd) {
              // เช็คว่าหลัง mention ไม่มี text ต่อ (หรือเป็นช่องว่างตามหลัง)
              const remainingText = value.slice(mentionEnd).trim();
              if (remainingText === '') {
                e.preventDefault(); // ยกเลิก backspace ปกติ
                // ลบ mention ทั้งชุดออก
                const newValue = value.slice(0, value.indexOf(mentionText)) + value.slice(mentionEnd);
                messageInput.value = newValue.trim();
                messageInput.setSelectionRange(value.indexOf(mentionText), value.indexOf(mentionText)); // วางเคอร์เซอร์ใหม่
                // ลบ user ออกจาก selectedUsers
                selectedUsers = selectedUsers.filter(u => u._id !== user._id);
                return; // ออกจาก loop ทันที
              }
            }
          }
        }
      });
    </script>

    <script>
      socket.on('update last group message', (message) => {
        console.log('🔄 อัปเดตข้อความล่าสุดของแชทกลุ่ม:', message);

        // ตรวจสอบว่ามีข้อมูลที่จำเป็นครบถ้วน
        if (!message || !message.spaceId) {
          console.error('ข้อมูลข้อความไม่ครบถ้วน:', message);
          return;
        }

        // หา li ที่เป็นของแชทกลุ่ม
        const groupChatElement = document.querySelector('li[data-space-id="' + message.spaceId + '"] .conuser');
        const groupTimeElement = document.querySelector('li[data-space-id="' + message.spaceId + '"] .timemessage');

        if (groupChatElement) {
          // ตรวจสอบว่ามี userId ในข้อความหรือไม่
          if (message.userId && message.userId._id && message.userId._id.toString() === '<%= user._id %>') {
            groupChatElement.textContent = 'คุณ: ' + (message.message || 'ไม่มีข้อความล่าสุด');
          } else {
            // ถ้าไม่มีข้อมูลผู้ส่ง หรือไม่ใช่ผู้ใช้ปัจจุบัน
            const senderName = message.userId ? message.userId.firstName + ': ' : '';
            groupChatElement.textContent = senderName + (message.message || 'ไม่มีข้อความล่าสุด');
          }
        }

        if (groupTimeElement && message.createdAt) {
          groupTimeElement.textContent = formatTime(new Date(message.createdAt));
        }
      });

      socket.on('update last private message', (message) => {
        console.log('🔄 อัปเดตข้อความล่าสุดของแชทส่วนตัว:', message);

        // ตรวจสอบว่ามีข้อมูลที่จำเป็นครบถ้วน
        if (!message || !message.userId || !message.targetUserId) {
          console.error('ข้อมูลข้อความไม่ครบถ้วน:', message);
          return;
        }

        // หา userId ของผู้สนทนา
        const otherUserId = message.userId._id && message.userId._id.toString() === '<%= user._id %>'
          ? (message.targetUserId._id || '').toString()
          : (message.userId._id || '').toString();

        // หา li ที่เป็นของแชทเดี่ยว
        const privateChatElement = document.querySelector('li[data-user-id="' + otherUserId + '"] .conuser');
        const privateTimeElement = document.querySelector('li[data-user-id="' + otherUserId + '"] .timemessage');

        if (privateChatElement) {
          if (message.userId._id && message.userId._id.toString() === '<%= user._id %>') {
            privateChatElement.textContent = 'คุณ: ' + (message.message || '');
          } else {
            privateChatElement.textContent = message.message || '';
          }
        }
        if (privateTimeElement && message.createdAt) {
          privateTimeElement.textContent = formatTime(new Date(message.createdAt));
        }
      });
    </script>

    <script>
      // ฟังก์ชันดึงจำนวนข้อความที่ยังไม่อ่าน
      // Update the fetchUnreadCounts function in your existing script
      async function fetchUnreadCounts() {
        try {
          const spaceId = '<%= spaces._id %>';
          const userId = '<%= user._id %>';
          const path = window.location.pathname;

          // ดึงข้อมูลจำนวนข้อความที่ยังไม่อ่านในแชทกลุ่ม
          const groupResponse = await fetch(`/space/item/${spaceId}/chat/unread-count`);
          const groupData = await groupResponse.json();

          const groupChatElement = document.querySelector('li[data-space-id="' + spaceId + '"]');
          if (groupChatElement) {
            const notiElement = groupChatElement.querySelector('.notimesaage');

            // ตรวจสอบว่าผู้ใช้กำลังอยู่ในหน้าแชทกลุ่มหรือไม่
            const isInGroupChat = path === `/space/item/${spaceId}/chat`;

            if (groupData.unreadCount > 0 && !isInGroupChat) {
              groupChatElement.classList.add('unread');
              notiElement.textContent = groupData.unreadCount;
              notiElement.style.display = 'flex';
            } else {
              groupChatElement.classList.remove('unread');
              notiElement.style.display = 'none';
            }
          }

          // ดึงข้อมูลจำนวนข้อความที่ยังไม่อ่านในแชทส่วนตัว
          const collaborators = document.querySelectorAll('li[data-user-id]');
          collaborators.forEach(async (collab) => {
            const targetUserId = collab.dataset.userId;
            const privateResponse = await fetch(`/space/item/${spaceId}/chat/private/${targetUserId}/unread-count`);
            const privateData = await privateResponse.json();

            if (privateData.success) {
              const notiElement = collab.querySelector('.notimesaage');

              // ตรวจสอบว่าผู้ใช้กำลังอยู่ในแชทส่วนตัวกับผู้ใช้นี้หรือไม่
              const isInPrivateChat = path === `/space/item/${spaceId}/chat/private/${targetUserId}`;

              if (privateData.unreadCount > 0 && !isInPrivateChat) {
                collab.classList.add('unread');
                notiElement.textContent = privateData.unreadCount;
                notiElement.style.display = 'flex';
              } else {
                collab.classList.remove('unread');
                notiElement.style.display = 'none';
              }
            }
          });

        } catch (error) {
          console.error('Error fetching unread counts:', error);
        }
      }


      // Add this function to mark messages as read when a chat is opened
      async function markMessagesAsRead() {
        const path = window.location.pathname;
        const spaceId = '<%= spaces._id %>';
        const userId = '<%= user._id %>';

        try {
          // ตรวจสอบว่าเป็นแชทส่วนตัวหรือไม่
          const privateChatMatch = path.match(/\/space\/item\/[^/]+\/chat\/private\/([^/]+)/);

          if (privateChatMatch) {
            // แชทส่วนตัว - ทำเครื่องหมายว่าอ่านแล้ว
            const targetUserId = privateChatMatch[1];
            await fetch(`/space/item/${spaceId}/chat/private/${targetUserId}/mark-as-read`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ userId })
            });
          } else {
            // แชทกลุ่ม - ทำเครื่องหมายว่าอ่านแล้ว
            await fetch(`/space/item/${spaceId}/chat/mark-group-read`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ userId })
            });
          }

          // อัปเดตสถานะเฉพาะแชทที่เปิดอยู่เท่านั้น
          const currentChatElement = document.querySelector('.user-list li.active');
          if (currentChatElement) {
            const notiElement = currentChatElement.querySelector('.notimesaage');
            if (notiElement) {
              notiElement.style.display = 'none';
              currentChatElement.classList.remove('unread');
            }
          }
        } catch (error) {
          console.error('Error marking messages as read:', error);
        }
      }

      // Call this when the page loads and when a chat is opened
      document.addEventListener('DOMContentLoaded', () => {
        fetchUnreadCounts();

        // Also mark as read when switching between chats
        document.querySelectorAll('.user-list li').forEach(item => {
          item.addEventListener('click', function () {
            // ตรวจสอบว่าไม่ใช่การคลิกที่แชทเดิม
            if (!this.classList.contains('active')) {
              setTimeout(markMessagesAsRead, 300);
            }
          });
        });
      });

      // Update the socket.io listeners to refresh unread counts
      socket.on('new message', () => {
        const path = window.location.pathname;
        const spaceId = '<%= spaces._id %>';

        // ตรวจสอบว่าข้อความใหม่ไม่ใช่ในแชทที่กำลังเปิดอยู่
        if (!path.includes('/chat/private/') && !path.endsWith('/chat')) {
          fetchUnreadCounts();
        }

      });
      socket.on('update last group message', (message) => {
        // อัปเดตเฉพาะถ้าไม่ใช่แชทกลุ่มที่กำลังเปิดอยู่
        if (!window.location.pathname.endsWith('/chat')) {
          fetchUnreadCounts();
        }
      });
      socket.on('update last private message', (message) => {
        const path = window.location.pathname;
        const targetUserId = message.userId._id.toString() === '<%= user._id %>'
          ? message.targetUserId._id.toString()
          : message.userId._id.toString();

        // อัปเดตเฉพาะถ้าไม่ใช่แชทส่วนตัวที่กำลังเปิดอยู่
        if (!path.includes(`/chat/private/${targetUserId}`)) {
          fetchUnreadCounts();
        }
      });
    </script>

    <script>
      // แสดงจำนวนสมาชิกทั้งหมดในกลุ่ม
      function displayTotalMembers() {
        const allMemberDiv = document.querySelector('.all-member');
        if (!allMemberDiv) return;

        // จำนวนสมาชิกทั้งหมด = เจ้าของโปรเจกต์ + collaborators
        const totalMembers = 1 + <%= spaces.collaborators.length %>;

        allMemberDiv.innerHTML = `
      <div style="font-size: 14px; color: #666;">
        ${totalMembers} สมาชิก
      </div>
    `;
      }

      // เรียกฟังก์ชันเมื่อโหลดหน้า
      document.addEventListener('DOMContentLoaded', displayTotalMembers);
    </script>

    <script>
      // ฟังก์ชันอัปโหลดไฟล์
      const showImgFileChat = document.querySelector('.showimgfile-chat');
      const chatImgIcon = document.querySelector('.chat-img');
      const chatFileIcon = document.querySelector('.chat-file');
      let selectedFiles = [];

      // ฟังก์ชันแสดงไฟล์ที่เลือก
      function displaySelectedFiles() {
        showImgFileChat.innerHTML = '';

        if (selectedFiles.length === 0) {
          showImgFileChat.style.display = 'none';
          return;
        }

        const fileList = document.createElement('div');
        fileList.className = 'file-list';

        selectedFiles.forEach((file, index) => {
          const fileElement = document.createElement('div');
          fileElement.className = 'file-item';

          if (file.type.startsWith('image/')) {
            // แสดงตัวอย่างภาพ
            const reader = new FileReader();
            reader.onload = function (e) {
              fileElement.innerHTML = `
          <div class="file-content">
            <div class="image-preview">
              <img src="${e.target.result}" alt="ตัวอย่างภาพ">
            </div>
            <div class="file-info">
              <div class="file-name">${file.name}</div>
              <div class="file-meta">
                <span class="file-size">${formatFileSize(file.size)}</span>
              </div>
            </div>
            <button class="remove-file" data-index="${index}">
              <i class="bx bx-x"></i>
            </button>
          </div>
        `;

              fileElement.querySelector('.remove-file').addEventListener('click', function (e) {
                e.stopPropagation();
                selectedFiles.splice(index, 1);
                displaySelectedFiles();
              });
            };
            reader.readAsDataURL(file);
          } else {
            // แสดงไอคอนไฟล์ตามประเภท
            let fileIcon = '';
            if (file.type.includes('pdf')) {
              fileIcon = '<i class="bx bxs-file-pdf file-icon"></i>';
            } else if (file.type.includes('word') || file.type.includes('document')) {
              fileIcon = '<i class="bx bxs-file-doc file-icon"></i>';
            } else if (file.type.includes('excel') || file.type.includes('spreadsheet')) {
              fileIcon = '<i class="bx bxs-file-xls file-icon"></i>';
            } else {
              fileIcon = '<i class="bx bx-file file-icon"></i>';
            }

            fileElement.innerHTML = `
        <div class="file-content">
          <div class="file-icon-container">
            ${fileIcon}
          </div>
          <div class="file-info">
            <div class="file-name">${file.name}</div>
            <div class="file-meta">
              <span class="file-size">${formatFileSize(file.size)}</span>
            </div>
          </div>
          <button class="remove-file" data-index="${index}">
            <i class="bx bx-x"></i>
          </button>
        </div>
      `;

            fileElement.querySelector('.remove-file').addEventListener('click', function (e) {
              e.stopPropagation();
              selectedFiles.splice(index, 1);
              displaySelectedFiles();
            });
          }

          fileList.appendChild(fileElement);
        });

        showImgFileChat.appendChild(fileList);
        showImgFileChat.style.display = 'block';
      }

      // ฟังก์ชันจัดรูปแบบขนาดไฟล์
      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }

      // การจัดการเมื่อคลิกที่ไอคอนรูปภาพ (เฉพาะไฟล์รูปภาพ)
      chatImgIcon.addEventListener('click', function () {
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*';
        fileInput.multiple = true;
        fileInput.onchange = (e) => {
          const files = Array.from(e.target.files);
          const validFiles = files.filter(file => file.type.startsWith('image/'));
          if (validFiles.length !== files.length) {
            alert('กรุณาเลือกเฉพาะไฟล์รูปภาพเท่านั้น!');
          }
          selectedFiles = [...selectedFiles, ...validFiles];
          displaySelectedFiles();
        };
        fileInput.click();
      });

      // การจัดการเมื่อคลิกที่ไอคอนเอกสาร (เฉพาะไฟล์เอกสาร)
      chatFileIcon.addEventListener('click', function () {
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.multiple = true;
        fileInput.onchange = (e) => {
          const files = Array.from(e.target.files);
          selectedFiles = [...selectedFiles, ...files];
          displaySelectedFiles();
        };
        fileInput.click();
      });
      // ปรับปรุงการส่งฟอร์มเพื่อจัดการการอัปโหลดไฟล์
      document.getElementById('chatForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const message = document.getElementById('messageInput').value;
        const spaceId = '<%= spaces._id %>';
        const userId = '<%= user._id %>';
        const formData = new FormData();

        formData.append('message', message);
        formData.append('spaceId', spaceId);
        formData.append('userId', userId);

        // เพิ่มไฟล์ทั้งหมดที่เลือก
        selectedFiles.forEach((file, index) => {
          formData.append('files', file);
        });

        try {
          const response = await fetch(`/space/item/${spaceId}/chat/upload`, {
            method: 'POST',
            body: formData,
            // ไม่ต้องกำหนด Content-Type จะถูกตั้งโดยอัตโนมัติ
          });

          if (response.ok) {
            // ล้างข้อมูลหลังส่งสำเร็จ
            document.getElementById('messageInput').value = '';
            selectedFiles = [];
            showImgFileChat.style.display = 'none';
            showImgFileChat.innerHTML = '';
          }
        } catch (error) {
          console.error('เกิดข้อผิดพลาดในการส่งข้อความ:', error);
        }
      });
      // ปิดส่วนแสดงไฟล์เมื่อคลิกที่อื่นในหน้าเว็บ
      document.addEventListener('click', function (e) {
        if (!showImgFileChat.contains(e.target) &&
          e.target !== chatImgIcon &&
          e.target !== chatFileIcon &&
          !chatImgIcon.contains(e.target) &&
          !chatFileIcon.contains(e.target)) {
          if (selectedFiles.length === 0) {
            showImgFileChat.style.display = 'none';
          }
        }
      });

      // ป้องกันการปิดเมื่อคลิกในส่วนแสดงไฟล์
      showImgFileChat.addEventListener('click', function (e) {
        e.stopPropagation();
      });
    </script>
<head>
  <style>
    body {
      background-color: #f7f7f7;
    }

    .chat-container {
      max-width: 900px;
      margin: 20px auto;
      display: flex;
      border: #ebebeb solid 1px;
      box-shadow: 0 20px 25px -5px rgb(0 0 0 / .1), 0 8px 10px -6px rgb(0 0 0 / .1);
      border-radius: 16px;
      background-color: #ffffff;
    }

    .chat-seccon {
      display: flex;
      width: -webkit-fill-available;
    }

    .chat-container .chat-head {
      min-width: 50px;
    }

    .chat-container .chat-formsubmit {
      border-top: #efefef 1px solid;
    }

    .chat-container #chat-sec1 {
      padding: 0 16px;
    }

    .chat-container #chat-sec {
      padding: 16px;
    }

    .messages {
      min-height: 400px;
      max-height: 410px;
      overflow-y: scroll;
    }

    .message {
      margin-bottom: 10px;
      display: flex;
      align-items: flex-end;
    }

    .message.current-user {
      justify-content: flex-end;
    }

    .message.other-user {
      justify-content: flex-left;
    }

    .message-bubble {
      max-width: 70%;
      padding: 10px;
      border-radius: 10px;
      position: relative;
      word-wrap: break-word;
      overflow-wrap: break-word;
      white-space: normal;
    }

    .message-bubble #chat-nameuser {
      font-size: 14px;
      color: #374151;
    }

    .message.current-user .message-bubble {
      background-color: #007bff;
      color: white;
      margin-left: auto;
    }

    .message.other-user .message-bubble {
      background-color: #f1f1f1;
      color: black;
      margin-right: auto;
    }

    .message-time {
      font-size: 0.8em;
      color: #666;
      margin-top: 5px;
      text-align: right;
    }

    .date-divider {
      text-align: center;
      margin: 10px 0;
      color: #666;
      font-size: 0.9em;
      font-weight: bold;
    }

    .avatar {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      margin-right: 10px;
    }

    .chat-form {
      display: flex;
    }

    .chat-form input {
      margin: 0 20px;
      font-size: 14px;
      flex: 1;
      padding: 10px;
      border: #cecece solid 1px;
      border-radius: 20px;
    }

    .chat-form button {
      margin-right: 20px;
      padding: 10px 20px;
      background-color: #007bff;
      border-radius: 100px;
      border: 1px solid #007bff;
    }

    .user-search-results {
      position: absolute;
      background: white;
      border: 1px solid #ddd;
      max-height: 150px;
      overflow-y: auto;
      z-index: 1000;
      width: 300px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      margin-top: 5px;
      bottom: 70px;
    }

    .user-list {
      width: 50%;
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .headuser-list {
      padding: 16px;
      display: flex;
      justify-content: space-between;
    }

    .headuser-list h2 {
      font-size: 18px;
      margin: 0;
      align-self: center;
    }

    .headuser-list button {
      font-size: 20px;
      border: none;
      background-color: #ffffff;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      border-radius: 100px;
    }

    .headuser-list button:hover {
      background-color: rgb(243, 244, 246);
    }

    .user-list ul {
      list-style-type: none;
      padding: 8px;
    }

    .chat-secright {
      width: 50%;
    }

    .user-list li {
      margin-top: 5px;
      padding: 12px;
      border-radius: 12px;
      cursor: pointer;
      width: 100%;
    }

    .user-list li:hover {
      background-color: #f1f1f1;
    }

    .user-list a {
      display: flex;
      align-items: center;
      width: 100%;
      gap: 0.75rem;
      text-decoration: none;
    }

    .conmessage {
      width: 100%;
      display: flex;
      justify-content: space-between;
    }

    .nameconuser .conuser {
      width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .user-list .profileimage-chat {
      width: 2.5rem;
      height: 2.5rem;
      object-fit: cover;
      border-radius: 100%;
    }

    .new-message-btn {
      position: absolute;
      bottom: 20px;
      right: 300px;
      z-index: 1000;
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
    }

    .new-message-btn.show {
      opacity: 1;
      visibility: visible;
      transform: translateY(-100px);
    }

    .read-status,
    .message.current-user .message-time {
      color: rgb(219 234 254);
    }

    .name-chat {
      font-weight: 500;
    }

    .notimesaage {
      justify-self: center;
    }

    .all-chat {
      min-height: 400px;
      max-height: 410px;
      overflow-y: scroll;
    }

    .nameconuser .nameuser {
      font-size: 16px;
      font-weight: 500;
      color: #020817;
    }

    .nameconuser .conuser {
      width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      font-size: 14px;
      color: #111827b3;
    }

    .timenotimessage .timemessage {
      font-size: 12px;
      color: #6B7280;
    }

    .user-list li.active {
      background-color: #f1f1f1;
    }

    .user-list li.active:hover {
      background-color: #f1f1f1;
    }

    .notimesaage {
      background-color: #3b82f6;
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: none;
      /* เริ่มต้นให้ซ่อนไว้ก่อน */
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: 600;
      margin-top: 2px;
    }


    .user-list li.unread .nameuser {
      font-weight: 600;
      color: #1a1a1a;
    }

    .user-list li.unread .conuser {
      color: #111827;
      font-weight: 500;
    }
  </style>
</head>

<%- include('../task/task_component/task-navbar.ejs') %>
  <div class="chat-container">
    <div class="chat-seccon">
      <div class="user-list">
        <div class="headuser-list">
          <h2>แชท</h2>
          <button><i class='bx bxs-chevron-right'></i></button>
        </div>
        <div class="all-chat">
          <ul>
            <li class="<%= currentPage === 'group_chat' ? 'active' : '' %>" data-space-id="<%= spaces._id %>">
              <a href="/space/item/<%= spaces._id %>/chat">
                <img class="profileimage-chat" src="<%= spaces.projectCover %>" alt="Group Chat" width="30">
                <div class="conmessage">
                  <div class="nameconuser">
                    <div class="nameuser">แชทกลุ่ม <%= spaces.projectName %>
                    </div>
                    <div class="conuser">
                      <% if (lastGroupMessage) { %>
                        <% if (lastGroupMessage.userId && lastGroupMessage.userId._id.toString()===user._id.toString())
                          { %>
                          คุณ: <%= lastGroupMessage.message %>
                            <% } else { %>
                              <% if (lastGroupMessage.userId) { %>
                                <%= lastGroupMessage.userId.firstName %>: <%= lastGroupMessage.message %>
                                    <% } else { %>
                                      <%= lastGroupMessage.message %>
                                        <% } %>
                                          <% } %>
                                            <% } else { %>
                                              <% } %>
                    </div>
                  </div>
                  <div class="timenotimessage">
                    <div class="timemessage">
                      <% if (lastGroupMessage) { %>
                        <%= formatTime(new Date(lastGroupMessage.createdAt)) %>
                          <% } else { %>
                            <% } %>
                    </div>
                    <div class="notimesaage"></div>
                  </div>
                </div>
              </a>
            </li>

            <% spaces.collaborators.forEach(collab=> { %>
              <% if (collab.user && collab.user._id.toString() !==user._id.toString()) { %>
                <li class="<%= currentChatUserId === collab.user._id.toString() ? 'active' : '' %>"
                  data-user-id="<%= collab.user._id %>"> <a
                    href="/space/item/<%= spaces._id %>/chat/private/<%= collab.user._id %>">
                    <img class="profileimage-chat" src="<%= collab.user.profileImage %>" alt="Profile" width="30">
                    <div class="conmessage">
                      <div class="nameconuser">
                        <div class="name-chat nameuser">
                          <%= collab.user.firstName %>
                            <%= collab.user.lastName %>
                        </div>
                        <div class="conuser">
                          <% if (collab.lastMessage) { %>
                            <% if (collab.lastMessageSender &&
                              collab.lastMessageSender._id.toString()===user._id.toString()) { %>
                              คุณ: <%= collab.lastMessage %>
                                <% } else { %>
                                  <%= collab.lastMessage %>
                                    <% } %>
                                      <% } %>
                        </div>
                      </div>
                      <div class="timenotimessage">
                        <div class="timemessage">
                          <% if (collab.lastMessageTime) { %>
                            <%= formatTime(new Date(collab.lastMessageTime)) %>
                              <% } %>
                        </div>
                        <div class="notimesaage"></div>
                      </div>
                    </div>

                  </a>
                </li>
                <% } %>
                  <% }); %>
          </ul>
        </div>
      </div>
      <div class="chat-secright">
        <div class="chat-head" id="chat-sec">
          <h4>แชทส่วนตัวกับ <%= targetUser.firstName %>
              <%= targetUser.lastName %>
          </h4>
        </div>
        <div class="chat-con" id="chat-sec1">
          <div class="messages" id="messages">
            <% let previousDate=null; %>
              <% messages.forEach((msg)=> { %>
                <% const messageDate=new Date(msg.createdAt); %>
                  <% if (previousDate===null || isNewDay(previousDate, messageDate)) { %>
                    <div class="date-divider">
                      <%= formatDate(messageDate) %>
                    </div>
                    <% } %>
                      <% previousDate=messageDate; %>
                        <div
                          class="message <%= msg.userId._id.toString() === user._id.toString() ? 'current-user' : 'other-user' %>"
                          data-message-id="<%= msg._id %>">
                          <% if (msg.userId._id.toString() !==user._id.toString()) { %>
                            <img src="<%= msg.userId.profileImage || '/path/to/default/avatar.png' %>" alt="User"
                              class="avatar">
                            <% } %>
                              <div class="message-bubble">
                                <% if (msg.userId._id.toString() !==user._id.toString()) { %>
                                  <div id="chat-nameuser">
                                    <%= msg.userId.firstName %>
                                      <%= msg.userId.lastName %>
                                  </div>
                                  <% } %>
                                    <%= msg.message %>
                                      <div class="message-time">
                                        <%= formatTime(messageDate) %>
                                          <% if (msg.userId._id.toString()===user._id.toString()) { %>
                                            <span class="read-status">เห็นแล้ว: <%= msg.readBy.length %> คน</span>
                                            <% } %>
                                      </div>
                              </div>
                        </div>
                        <% }); %>
          </div>
        </div>
        <div class="chat-formsubmit" id="chat-sec">
          <form class="chat-form" id="chatForm">
            <input type="text" id="messageInput" name="message" placeholder="พิมพ์ข้อความ..." required
              autocomplete="off">
            <button type="submit"><i class='bx bx-send' style='color:#ffffff'></i></button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // เมื่อโหลดหน้าเว็บเสร็จ
    document.addEventListener('DOMContentLoaded', () => {
      // ตรวจสอบ URL ปัจจุบันเพื่อกำหนด active item
      const path = window.location.pathname;
      const chatItems = document.querySelectorAll('.user-list li');

      chatItems.forEach(item => {
        // ลบคลาส active ออกจากทั้งหมดก่อน
        item.classList.remove('active');

        // ตรวจสอบว่าเป็นลิงก์ปัจจุบันหรือไม่
        const link = item.querySelector('a');
        if (link && link.getAttribute('href') === path) {
          item.classList.add('active');
        }
      });
    });

    // เมื่อคลิกที่รายการแชท
    document.querySelectorAll('.user-list li').forEach(item => {
      item.addEventListener('click', function () {
        // ลบคลาส active ออกจากทั้งหมด
        document.querySelectorAll('.user-list li').forEach(li => {
          li.classList.remove('active');
        });

        // เพิ่มคลาส active ให้กับรายการที่คลิก
        this.classList.add('active');
      });
    });
  </script>

  <script>
    socket.on('update last group message', (message) => {
      console.log('🔄 อัปเดตข้อความล่าสุดของแชทกลุ่ม:', message);

      // ตรวจสอบว่ามีข้อมูลที่จำเป็นครบถ้วน
      if (!message || !message.spaceId) {
        console.error('ข้อมูลข้อความไม่ครบถ้วน:', message);
        return;
      }

      // หา li ที่เป็นของแชทกลุ่ม
      const groupChatElement = document.querySelector('li[data-space-id="' + message.spaceId + '"] .conuser');
      const groupTimeElement = document.querySelector('li[data-space-id="' + message.spaceId + '"] .timemessage');

      if (groupChatElement) {
        // ตรวจสอบว่ามี userId ในข้อความหรือไม่
        if (message.userId && message.userId._id && message.userId._id.toString() === '<%= user._id %>') {
          groupChatElement.textContent = 'คุณ: ' + (message.message || 'ไม่มีข้อความล่าสุด');
        } else {
          // ถ้าไม่มีข้อมูลผู้ส่ง หรือไม่ใช่ผู้ใช้ปัจจุบัน
          const senderName = message.userId ? message.userId.firstName + ': ' : '';
          groupChatElement.textContent = senderName + (message.message || 'ไม่มีข้อความล่าสุด');
        }
      }

      if (groupTimeElement && message.createdAt) {
        groupTimeElement.textContent = formatTime(new Date(message.createdAt));
      }
    });

    socket.on('update last private message', (message) => {
      console.log('🔄 อัปเดตข้อความล่าสุดของแชทส่วนตัว:', message);

      // ตรวจสอบว่ามีข้อมูลที่จำเป็นครบถ้วน
      if (!message || !message.userId || !message.targetUserId) {
        console.error('ข้อมูลข้อความไม่ครบถ้วน:', message);
        return;
      }

      // หา userId ของผู้สนทนา
      const otherUserId = message.userId._id && message.userId._id.toString() === '<%= user._id %>'
        ? (message.targetUserId._id || '').toString()
        : (message.userId._id || '').toString();

      // หา li ที่เป็นของแชทเดี่ยว
      const privateChatElement = document.querySelector('li[data-user-id="' + otherUserId + '"] .conuser');
      const privateTimeElement = document.querySelector('li[data-user-id="' + otherUserId + '"] .timemessage');

      if (privateChatElement) {
        if (message.userId._id && message.userId._id.toString() === '<%= user._id %>') {
          privateChatElement.textContent = 'คุณ: ' + (message.message || '');
        } else {
          privateChatElement.textContent = message.message || '';
        }
      }
      if (privateTimeElement && message.createdAt) {
        privateTimeElement.textContent = formatTime(new Date(message.createdAt));
      }
    });
  </script>

  <script>
    // ฟังก์ชันสำหรับจัดรูปแบบเวลาเป็น PM/AM
    function formatTime(date) {
      let hours = date.getHours();
      let minutes = date.getMinutes();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12;
      hours = hours ? hours : 12; // ชั่วโมง 0 จะเป็น 12 AM
      minutes = minutes < 10 ? '0' + minutes : minutes;
      return `${hours}:${minutes} ${ampm}`;
    }

    // ฟังก์ชันสำหรับตรวจสอบการเปลี่ยนวัน
    function isNewDay(date1, date2) {
      return (
        date1.getFullYear() !== date2.getFullYear() ||
        date1.getMonth() !== date2.getMonth() ||
        date1.getDate() !== date2.getDate()
      );
    }

    // ฟังก์ชันสำหรับจัดรูปแบบวันที่
    function formatDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return date.toLocaleDateString('th-TH', options);
    }

    // เมื่อผู้ใช้อยู่ในหน้าแชทส่วนตัว
    socket.emit('user in private chat', {
      userId: '<%= user._id %>',
      targetUserId: '<%= targetUser._id %>'
    });

    // เมื่อผู้ใช้ออกจากหน้าแชทส่วนตัว
    window.addEventListener('beforeunload', () => {
      socket.emit('user left private chat', {
        userId: '<%= user._id %>',
        targetUserId: '<%= targetUser._id %>',
      });
    });



    // ส่งข้อความส่วนตัว
    document.getElementById('chatForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const message = document.getElementById('messageInput').value;
      socket.emit('send private message', {
        spaceId: '<%= spaces._id %>',
        message,
        userId: '<%= user._id %>',
        targetUserId: '<%= targetUser._id %>'
      });
      document.getElementById('messageInput').value = '';
    });

    // รับสถานะข้อความที่ถูกอ่าน
    socket.on('private message read', (data) => {
      const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
      if (messageElement) {
        const readStatusElement = messageElement.querySelector('.read-status');
        if (readStatusElement) {
          readStatusElement.textContent = `เห็นแล้ว: ${data.readByCount} คน`;
        }
      }
    });
  </script>

  <script>
    const messagesContainer = document.getElementById('messages');
    const chatSecRight = document.querySelector('.chat-secright');

    // สร้างปุ่มเลื่อนลงล่าง
    const newMessageButton = document.createElement("button");
    newMessageButton.innerHTML = "<i class='bx bxs-chevron-down'></i>";
    newMessageButton.classList.add("new-message-btn");
    chatSecRight.appendChild(newMessageButton);

    // ฟังก์ชันตรวจสอบตำแหน่งการเลื่อน
    function checkScrollPosition() {
      const nearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop <= messagesContainer.clientHeight + 50;
      if (!nearBottom) {
        newMessageButton.classList.add("show");
      } else {
        newMessageButton.classList.remove("show");
      }
    }

    // บันทึกตำแหน่งการเลื่อน
    function saveScrollPosition() {
      localStorage.setItem(`chatScroll_<%= spaces._id %>_<%= targetUser._id %>`, messagesContainer.scrollTop);
    }

    // กู้คืนตำแหน่งการเลื่อนเมื่อโหลดหน้า
    function restoreScrollPosition() {
      const savedPosition = localStorage.getItem(`chatScroll_<%= spaces._id %>_<%= targetUser._id %>`);
      if (savedPosition) {
        messagesContainer.scrollTop = parseInt(savedPosition);
      } else {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    }

    // เรียกใช้เมื่อโหลดหน้า
    restoreScrollPosition();
    checkScrollPosition();

    // จัดการเหตุการณ์การเลื่อน
    messagesContainer.addEventListener("scroll", () => {
      checkScrollPosition();
      saveScrollPosition();
    });

    // เมื่อคลิกปุ่มเลื่อนลงล่าง
    newMessageButton.addEventListener("click", () => {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      newMessageButton.classList.remove("show");
      saveScrollPosition();
    });

    // บันทึกตำแหน่งเมื่อเปลี่ยนแท็บหรือปิดหน้าต่าง
    window.addEventListener("beforeunload", saveScrollPosition);
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === 'hidden') {
        saveScrollPosition();
      }
    });

    // แก้ไขส่วนรับข้อความใหม่
    socket.on('private message', (msg) => {
      const messagesContainer = document.getElementById('messages');
      const messageDate = new Date(msg.createdAt);

      // ตรวจสอบการเปลี่ยนวัน
      const lastMessage = messagesContainer.lastElementChild;
      if (lastMessage && lastMessage.classList.contains('message')) {
        const lastMessageDate = new Date(lastMessage.dataset.timestamp);
        if (isNewDay(lastMessageDate, messageDate)) {
          const dateDivider = document.createElement('div');
          dateDivider.classList.add('date-divider');
          dateDivider.textContent = formatDate(messageDate);
          messagesContainer.appendChild(dateDivider);
        }
      }

      // สร้าง element สำหรับข้อความใหม่
      const messageElement = document.createElement('div');
      messageElement.classList.add('message', msg.userId._id === '<%= user._id %>' ? 'current-user' : 'other-user');
      messageElement.dataset.messageId = msg._id;
      messageElement.dataset.timestamp = msg.createdAt;

      messageElement.innerHTML = msg.userId._id !== '<%= user._id %>' ? `
      <img src="${msg.userId.profileImage}" alt="User" class="avatar">
      <div class="message-bubble">
        <div id="chat-nameuser">${msg.userId.firstName} ${msg.userId.lastName}</div>
        ${msg.message}
        <div class="message-time">${formatTime(messageDate)}</div>
      </div>
    ` : `
      <div class="message-bubble">
        ${msg.message}
        <div class="message-time">
          ${formatTime(messageDate)}
          <span class="read-status">เห็นแล้ว: ${msg.readBy.length} คน</span>
        </div>
      </div>
    `;

      messagesContainer.appendChild(messageElement);

      // เลื่อนลงล่างเฉพาะเมื่อผู้ใช้ไม่ได้เลื่อนขึ้นดูข้อความเก่า
      const nearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop <= messagesContainer.clientHeight + 100;
      if (nearBottom) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
      saveScrollPosition();

      // อัปเดตสถานะ active เมื่อได้รับข้อความใหม่
      document.querySelectorAll('.user-list li').forEach(li => {
        li.classList.remove('active');

        // ตรวจสอบว่าเป็นแชทกับผู้ส่งข้อความหรือไม่
        const userId = li.dataset.userId;
        if (userId &&
          (userId === msg.userId._id.toString() ||
            userId === msg.targetUserId.toString())) {
          li.classList.add('active');
        }
      });
    });
  </script>

  <script>
    // ฟังก์ชันดึงจำนวนข้อความที่ยังไม่อ่าน
    async function fetchUnreadCounts() {
      try {
        const spaceId = '<%= spaces._id %>';
        const userId = '<%= user._id %>';

        // ดึงข้อมูลจำนวนข้อความที่ยังไม่อ่านในแชทกลุ่ม
        const groupResponse = await fetch(`/space/item/${spaceId}/chat/unread-count`);
        const groupData = await groupResponse.json();

        if (groupData.success) {
          const groupChatElement = document.querySelector('li[data-space-id="' + spaceId + '"] .notimesaage');
          if (groupChatElement) {
            groupChatElement.textContent = groupData.unreadCount > 0 ? groupData.unreadCount : '';
          }
        }

        // ดึงข้อมูลจำนวนข้อความที่ยังไม่อ่านในแชทส่วนตัวสำหรับแต่ละผู้ใช้
        const collaborators = document.querySelectorAll('li[data-user-id]');
        collaborators.forEach(async (collab) => {
          const targetUserId = collab.dataset.userId;
          const privateResponse = await fetch(`/space/item/${spaceId}/chat/private/${targetUserId}/unread-count`);
          const privateData = await privateResponse.json();

          if (privateData.success) {
            const privateChatElement = collab.querySelector('.notimesaage');
            if (privateChatElement) {
              privateChatElement.textContent = privateData.unreadCount > 0 ? privateData.unreadCount : '';
            }
          }
        });

      } catch (error) {
        console.error('Error fetching unread counts:', error);
      }
    }

    // เรียกฟังก์ชันเมื่อโหลดหน้า
    document.addEventListener('DOMContentLoaded', fetchUnreadCounts);

    // อัปเดตจำนวนข้อความที่ยังไม่อ่านเมื่อได้รับข้อความใหม่
    socket.on('new message', () => {
      fetchUnreadCounts();
    });

    socket.on('update last group message', () => {
      fetchUnreadCounts();
    });

    socket.on('update last private message', () => {
      fetchUnreadCounts();
    });
  </script>
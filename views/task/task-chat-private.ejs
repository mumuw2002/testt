<head>
  <style>
    body {
      background-color: #f7f7f7;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
    }

    .chat-container {
      max-width: 900px;
      margin: 20px auto;
      display: flex;
      border: #ebebeb solid 1px;
      box-shadow: 0 20px 25px -5px rgb(0 0 0 / .1), 0 8px 10px -6px rgb(0 0 0 / .1);
      border-radius: 16px;
      background-color: #ffffff;
      overflow: hidden;
    }

    .chat-seccon {
      width: -webkit-fill-available;
      display: flex;
      flex-direction: column;
    }

    .chat-head {
      padding: 16px;
      border-bottom: 1px solid #efefef;
      background-color: #fafafa;
    }

    .chat-con {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .messages {
      flex: 1;
      padding: 16px;
      overflow-y: auto;
      max-height: 500px;
      min-height: 400px;
    }

    .message {
      margin-bottom: 10px;
      display: flex;
      align-items: flex-end;
    }

    .message.current-user {
      justify-content: flex-end;
    }

    .message.other-user {
      justify-content: flex-start;
    }

    .message-bubble {
      max-width: 70%;
      padding: 10px;
      border-radius: 10px;
      position: relative;
      word-wrap: break-word;
      overflow-wrap: break-word;
      white-space: normal;
    }

    .message-bubble #chat-nameuser {
      font-size: 14px;
      color: #374151;
      font-weight: 600;
      margin-bottom: 4px;
    }

    .message.current-user .message-bubble {
      background-color: #007bff;
      color: white;
      margin-left: auto;
    }

    .message.other-user .message-bubble {
      background-color: #f1f1f1;
      color: black;
      margin-right: auto;
    }

    .message-time {
      font-size: 0.8em;
      color: #666;
      margin-top: 5px;
      text-align: right;
    }

    .date-divider {
      text-align: center;
      margin: 10px 0;
      color: #666;
      font-size: 0.9em;
      font-weight: bold;
    }

    .avatar {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      margin-right: 10px;
      object-fit: cover;
    }

    .chat-formsubmit {
      padding: 16px;
      border-top: 1px solid #efefef;
      background-color: #fafafa;
    }

    .chat-form {
      display: flex;
      align-items: center;
    }

    .chat-form input {
      flex: 1;
      padding: 10px;
      border: 1px solid #cecece;
      border-radius: 20px;
      font-size: 14px;
      outline: none;
    }

    .chat-form button {
      margin-left: 10px;
      padding: 10px 20px;
      background-color: #007bff;
      border: none;
      border-radius: 100px;
      color: white;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .chat-form button:hover {
      background-color: #0056b3;
    }

    .user-search-results {
      position: absolute;
      background: white;
      border: 1px solid #ddd;
      max-height: 150px;
      overflow-y: auto;
      z-index: 1000;
      width: 300px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      margin-top: 5px;
      bottom: 70px;
      border-radius: 8px;
    }

    .user-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .user-list li {
      padding: 8px 12px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .user-list li:hover {
      background-color: #f1f1f1;
    }

    .new-message-btn {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1000;
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
    }

    .new-message-btn.show {
      opacity: 1;
      visibility: visible;
      transform: translateX(-50%) translateY(-100px);
    }

    .read-status,
    .message.current-user .message-time {
      color: rgb(219 234 254);
    }

    .user-list h4 {
      padding: 16px;
      margin: 0;
      font-size: 18px;
      color: #333;
      border-bottom: 1px solid #efefef;
    }

    .user-list ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .user-list ul li a {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      text-decoration: none;
      color: #333;
    }

    .user-list ul li a:hover {
      background-color: #f1f1f1;
    }

    .user-list ul li a img {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      object-fit: cover;
    }

    .new-message-btn {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1000;
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
    }

    .new-message-btn.show {
      opacity: 1;
      visibility: visible;
      transform: translateX(-50%) translateY(-100px);
    }
  </style>
</head>
<%- include('../task/task_component/task-navbar.ejs') %>
  <div class="chat-container">
    <div class="chat-seccon">
      <div class="chat-head" id="chat-sec">
        <h4>แชทส่วนตัวกับ <%= targetUser.firstName %>
            <%= targetUser.lastName %>
        </h4>
      </div>
      <div class="chat-con" id="chat-sec1">
        <div class="messages" id="messages">
          <% let previousDate=null; %>
            <% messages.forEach((msg)=> { %>
              <% const messageDate=new Date(msg.createdAt); %>
                <% if (previousDate===null || isNewDay(previousDate, messageDate)) { %>
                  <div class="date-divider">
                    <%= formatDate(messageDate) %>
                  </div>
                  <% } %>
                    <% previousDate=messageDate; %>
                      <div
                        class="message <%= msg.userId._id.toString() === user._id.toString() ? 'current-user' : 'other-user' %>"
                        data-message-id="<%= msg._id %>">
                        <% if (msg.userId._id.toString() !==user._id.toString()) { %>
                          <img src="<%= msg.userId.profileImage || '/path/to/default/avatar.png' %>" alt="User"
                            class="avatar">
                          <% } %>
                            <div class="message-bubble">
                              <%= msg.message %>
                                <div class="message-time">
                                  <%= formatTime(messageDate) %>
                                    <% if (msg.userId._id.toString()===user._id.toString()) { %>
                                      <span class="read-status">เห็นแล้ว: <%= msg.readBy.length %> คน</span>
                                      <% } %>
                                </div>
                            </div>
                      </div>
                      <% }); %>
        </div>
      </div>

      <div class="chat-formsubmit" id="chat-sec">
        <form class="chat-form" id="chatForm">
          <input type="text" id="messageInput" name="message" placeholder="พิมพ์ข้อความ..." required autocomplete="off">
          <button type="submit"><i class='bx bx-send' style='color:#ffffff'></i></button>
        </form>
      </div>
    </div>
  </div>

  <script>
    // ฟังก์ชันสำหรับจัดรูปแบบเวลาเป็น PM/AM
    function formatTime(date) {
      let hours = date.getHours();
      let minutes = date.getMinutes();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12;
      hours = hours ? hours : 12; // ชั่วโมง 0 จะเป็น 12 AM
      minutes = minutes < 10 ? '0' + minutes : minutes;
      return `${hours}:${minutes} ${ampm}`;
    }

    // ฟังก์ชันสำหรับตรวจสอบการเปลี่ยนวัน
    function isNewDay(date1, date2) {
      return (
        date1.getFullYear() !== date2.getFullYear() ||
        date1.getMonth() !== date2.getMonth() ||
        date1.getDate() !== date2.getDate()
      );
    }

    // ฟังก์ชันสำหรับจัดรูปแบบวันที่
    function formatDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return date.toLocaleDateString('th-TH', options);
    }

    // เมื่อผู้ใช้อยู่ในหน้าแชทส่วนตัว
    socket.emit('user in private chat', {
      userId: '<%= user._id %>',
      targetUserId: '<%= targetUser._id %>'
    });

    // เมื่อผู้ใช้ออกจากหน้าแชทส่วนตัว
    window.addEventListener('beforeunload', () => {
      socket.emit('user left private chat', {
        userId: '<%= user._id %>',
        targetUserId: '<%= targetUser._id %>',
      });
    });

    // รับข้อความส่วนตัวใหม่
    socket.on('private message', (msg) => {
      const messagesContainer = document.getElementById('messages');
      const messageDate = new Date(msg.createdAt);

      // ตรวจสอบการเปลี่ยนวัน
      const lastMessage = messagesContainer.lastElementChild;
      if (lastMessage && lastMessage.classList.contains('message')) {
        const lastMessageDate = new Date(lastMessage.dataset.timestamp);
        if (isNewDay(lastMessageDate, messageDate)) {
          // แสดงวันที่เมื่อเปลี่ยนวัน
          const dateDivider = document.createElement('div');
          dateDivider.classList.add('date-divider');
          dateDivider.textContent = formatDate(messageDate);
          messagesContainer.appendChild(dateDivider);
        }
      }


      // สร้าง element สำหรับข้อความใหม่
      const messageElement = document.createElement('div');
      messageElement.classList.add('message', msg.userId._id === '<%= user._id %>' ? 'current-user' : 'other-user');
      messageElement.dataset.messageId = msg._id;
      messageElement.dataset.timestamp = msg.createdAt;

      // กำหนดเนื้อหาของข้อความ
      messageElement.innerHTML = msg.userId._id !== '<%= user._id %>' ? `
    <img src="${msg.userId.profileImage}" alt="User" class="avatar">
    <div class="message-bubble">
      <div id="chat-nameuser">${msg.userId.firstName} ${msg.userId.lastName}</div>
      ${msg.message}
      <div class="message-time">${formatTime(messageDate)}</div>
    </div>
  ` : `
    <div class="message-bubble">
      ${msg.message}
      <div class="message-time">
        ${formatTime(messageDate)}
        <span class="read-status">เห็นแล้ว: ${msg.readBy.length} คน</span>
      </div>
    </div>
  `;

      // เพิ่มข้อความใหม่เข้าไปใน container
      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    // ส่งข้อความส่วนตัว
    document.getElementById('chatForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const message = document.getElementById('messageInput').value;
      socket.emit('send private message', {
        spaceId: '<%= spaces._id %>',
        message,
        userId: '<%= user._id %>',
        targetUserId: '<%= targetUser._id %>'
      });
      document.getElementById('messageInput').value = '';
    });


    // ฟังก์ชันส่งข้อความ
    document.querySelector('.chat-form').addEventListener('submit', async (e) => {
      e.preventDefault();

      const message = messageInput.value;
      const spaceId = '<%= spaces._id %>';
      const userId = '<%= user._id %>';
      const targetUserId = '<%= targetUser._id %>';

      try {
        const response = await fetch(`/space/item/${spaceId}/chat/private/${targetUserId}/send`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message,
          }),
        });
        if (response.ok) {
          messageInput.value = '';
        } else {
          console.error('Failed to send message');
        }
      } catch (error) {
        console.error('Error sending message:', error);
      } finally {
        isSending = false;
      }
    });

    // รับสถานะข้อความที่ถูกอ่าน
    socket.on('private message read', (data) => {
      const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
      if (messageElement) {
        const readStatusElement = messageElement.querySelector('.read-status');
        if (readStatusElement) {
          readStatusElement.textContent = `เห็นแล้ว: ${data.readByCount} คน`;
        }
      }
    });

  </script>

  <script>
    const messagesContainer = document.getElementById('messages');

    // บันทึกตำแหน่งการเลื่อนใน localStorage
    function saveScrollPosition() {
      const scrollPosition = messagesContainer.scrollTop;
      localStorage.setItem('chatScrollPosition', scrollPosition);
    }

    // กู้คืนตำแหน่งการเลื่อน
    window.addEventListener('DOMContentLoaded', () => {
      const savedScrollPosition = localStorage.getItem('chatScrollPosition');
      if (savedScrollPosition) {
        messagesContainer.scrollTop = savedScrollPosition;
      }
    });

    // บันทึกตำแหน่งเมื่อผู้ใช้เลื่อน
    messagesContainer.addEventListener('scroll', saveScrollPosition);

    // ลบข้อมูลตำแหน่งเมื่อปิดหน้า
    window.addEventListener('beforeunload', saveScrollPosition);

    const chatSection = document.getElementById("chat-sec1");
    // สร้างปุ่ม newMessageButton
    const newMessageButton = document.createElement("button");
    newMessageButton.innerHTML = "<i class='bx bxs-chevron-down'></i>";
    newMessageButton.classList.add("new-message-btn");

    // เพิ่มปุ่มเข้าไปใน DOM
    chatSection.appendChild(newMessageButton);

    // ตรวจสอบตำแหน่งการเลื่อน
    let userScrolledUp = false;

    function checkScrollPosition() {
      const nearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop <= messagesContainer.clientHeight + 50;
      if (!nearBottom) {
        newMessageButton.classList.add("show");
      } else {
        newMessageButton.classList.remove("show");
      }
    }

    messagesContainer.addEventListener("scroll", checkScrollPosition);

    // เมื่อคลิกที่ปุ่ม newMessageButton
    newMessageButton.addEventListener("click", () => {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      newMessageButton.classList.remove("show");
    });
  </script>
<head>
  <style>
    body {
      background-color: #f7f7f7;
    }

    .chat-container {
      max-width: 80%;
      margin: 20px auto;
      display: flex;
      border: #ebebeb solid 1px;
      box-shadow: 0 20px 25px -5px rgb(0 0 0 / .1), 0 8px 10px -6px rgb(0 0 0 / .1);
      border-radius: 16px;
      background-color: #ffffff;
    }

    .chat-seccon {
      display: flex;
      width: -webkit-fill-available;
    }

    .chat-container .chat-head {
      min-width: 50px;
      display: flex;
      border-bottom: #efefef 1px solid;
    }

    .chat-container .chat-formsubmit {
      border-top: #efefef 1px solid;
    }

    .chat-container #chat-sec1 {
      background-color: #f8f8f8;
      padding: 15px;
      height: 360px;
    }

    .chat-container #chat-sec {
      padding: 16px;
    }

    .messages {
      height: 100%;
      overflow-y: auto;
    }

    .message {
      margin-bottom: 10px;
      display: flex;
      align-items: flex-end;
    }

    .message.current-user {
      justify-content: flex-end;
    }

    .message.other-user {
      justify-content: flex-left;
    }

    .message-bubble {
      max-width: 70%;
      padding: 10px;
      border-radius: 10px;
      position: relative;
      word-wrap: break-word;
      overflow-wrap: break-word;
      white-space: normal;
    }

    .message-bubble #chat-nameuser {
      font-size: 14px;
      color: #374151;
    }

    .message.current-user .message-bubble {
      background-color: #007bff;
      color: white;
      margin-left: auto;
    }

    .message.other-user .message-bubble {
      background-color: #f1f1f1;
      color: black;
      margin-right: auto;
    }

    .message-time {
      font-size: 0.8em;
      color: #666;
      margin-top: 5px;
      text-align: right;
    }

    .date-divider {
      
    }

    .avatar {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      margin-right: 10px;
    }

    .chat-form {
      display: flex;
    }

    .chat-form input {
      margin: 0 20px;
      font-size: 14px;
      flex: 1;
      padding: 10px;
      border: #cecece solid 1px;
      border-radius: 20px;
    }

    .chat-form button {
      margin-right: 20px;
      padding: 10px 20px;
      background-color: #007bff;
      border-radius: 100px;
      border: 1px solid #007bff;
    }

    .user-search-results {
      position: absolute;
      background: white;
      border: 1px solid #ddd;
      max-height: 150px;
      overflow-y: auto;
      z-index: 1000;
      width: 300px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      margin-top: 5px;
      bottom: 70px;
    }

    .user-list {
      width: 50%;
      list-style: none;
      padding: 0;
      margin: 0;
      border-right: #efefef 1px solid;
    }

    .headuser-list {
      padding: 16px;
      display: flex;
      justify-content: space-between;
    }

    .headuser-list h2 {
      font-size: 18px;
      margin: 0;
      align-self: center;
    }

    .headuser-list button {
      font-size: 20px;
      border: none;
      background-color: #ffffff;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      border-radius: 100px;
    }

    .headuser-list button:hover {
      background-color: rgb(243, 244, 246);
    }

    .user-list ul {
      list-style-type: none;
      padding: 8px;
    }

    .chat-secright {
      transition: flex 0.3s ease;
      width: 100%;
      height: 100%;
    }

    .user-list li {
      margin-top: 5px;
      padding: 12px;
      border-radius: 12px;
      cursor: pointer;
      width: 100%;
    }

    .user-list li:hover {
      background-color: #f1f1f1;
    }

    .user-list a {
      display: flex;
      align-items: center;
      width: 100%;
      gap: 0.75rem;
      text-decoration: none;
    }

    .conmessage {
      width: 100%;
      display: flex;
      justify-content: space-between;
    }

    .nameconuser .conuser {
      width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .user-list .profileimage-chat {
      width: 2.5rem;
      height: 2.5rem;
      object-fit: cover;
      border-radius: 100%;
    }

    .btn-new-message {
      position: relative;
      height: 0;
    }

    .new-message-btn {
      position: absolute;
      right: 50%;
      bottom: 70px;
      z-index: 999;
      width: 40px;
      height: 40px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .new-message-btn.show {
      opacity: 1;
      visibility: visible;
    }

    .new-message-btn i {
      font-size: 20px;
    }

    .chat-formsubmit {
      position: relative;
      z-index: 1000;
    }

    .read-status,
    .message.current-user .message-time {
      color: rgb(219 234 254);
    }

    .name-chat {
      font-weight: 500;
    }

    .notimesaage {
      justify-self: center;
    }

    .all-chat {
      min-height: 400px;
      max-height: 410px;
      overflow-y: auto;
    }

    .nameconuser .nameuser {
      font-size: 16px;
      font-weight: 500;
      color: #020817;
    }

    .nameconuser .conuser {
      width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      font-size: 14px;
      color: #111827b3;
    }

    .timenotimessage .timemessage {
      font-size: 12px;
      color: #6B7280;
    }

    .user-list li.active {
      background-color: #f1f1f1;
    }

    .user-list li.active:hover {
      background-color: #f1f1f1;
    }

    .notimesaage {
      background-color: #3b82f6;
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: 600;
      margin-top: 2px;
    }

    .user-list li.unread .nameuser {
      font-weight: 600;
      color: #1a1a1a;
    }

    .user-list li.unread .conuser {
      color: #111827;
      font-weight: 500;
    }

    .search-allchat {
      padding: 0 16px;
    }

    .search-allchat #searchChatInput {
      width: 100%;
      padding: 8px 12px;
      margin: 8px 0;
      border: 1px solid #ddd;
      border-radius: 20px;
      font-size: 14px;
    }

    .chatprivatename {
      display: flex;
      flex-direction: column;
    }

    .useronline {
      font-size: 12px;
      color: #666;
      margin-top: 4px;
    }

    .useronline.online {
      color: #4CAF50;
    }

    .useronline.offline {
      color: #9E9E9E;
    }

    .chatprivatename {
      margin-left: 10px;
    }

    .chat-secright .profileimage-chat {
      object-fit: cover;
      border-radius: 100%;
      width: 2.5rem;
      height: 2.5rem;
    }

    .user-list.collapsed {
      width: 80px;
      transition: width 0.3s ease;
      position: relative;
    }

    .user-list.collapsed .search-allchat {
      display: none;
    }

    .user-list.collapsed .all-chat li a {
      justify-content: center;
      padding: 8px;
      margin-top: 5px;
    }

    .user-list.collapsed .all-chat li .conmessage {
      display: none;
    }

    .user-list.collapsed .all-chat li {
      padding: 0;
      margin: 0;
    }

    .user-list.collapsed .all-chat li img {
      width: 40px;
      height: 40px;
    }

    .user-list.collapsed .all-chat li.active {
      background-color: #f1f1f1;
    }

    .user-list.collapsed .headuser-list {
      position: relative;
      top: 0;
      left: 0;
      width: 100%;
      padding: 16px;
      display: flex;
      justify-content: center;
      background-color: white;
      z-index: 10;
      border-top-left-radius: 20px;
    }

    .user-list.collapsed .headuser-list h2 {
      display: none;
    }

    .user-list.collapsed .headuser-list button {
      margin: 0 auto;
    }

    .headuser-list button i {
      transition: transform 0.3s ease;
    }

    .user-list.collapsed .headuser-list button i {
      transform: rotate(180deg);
    }

    .date-divider {
      text-align: center;
      margin: 1.5rem 0;
      position: relative;
    }

    .date-divider::before,
    .date-divider::after {
      content: "";
      position: absolute;
      top: 50%;
      width: 45%;
      height: 1px;
      background-color: #efefef;
    }

    .date-divider::before {
      left: 0;
    }

    .date-divider::after {
      right: 0;
    }

    .message-date {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      background-color: #f3f4f6;
      color: #6b7280;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 9999px;
      position: relative;
      z-index: 1;
    }

    .chaticon {
      display: flex;
      margin: 0;
      height: 100%;
      gap: 0.5rem;
    }

    .chat-formsubmit #icon-chat {
      display: flex;
      padding: 10px;
      justify-content: center;
      font-size: 27px;
      cursor: pointer;
      border-radius: 9999px;
      color: #5c6274;
    }

    .chat-formsubmit #icon-chat:hover {
      background-color: #f4f4f4;
      color: #020817;
    }
  </style>
</head>

<%- include('../task/task_component/task-navbar.ejs') %>
  <div class="chat-container">
    <div class="chat-seccon">
      <%- include('./task-chat/task-chatpartials.ejs') %>
        <div class="chat-secright">
          <div class="chat-head" id="chat-sec">
            <img class="profileimage-chat" src="<%= targetUser.profileImage %>" alt="Profile" width="30">
            <div class="chatprivatename">
              <span id="privatename">แชทส่วนตัวกับ <%= targetUser.firstName %>
                  <%= targetUser.lastName %></span>
              <div class="useronline">
                <% if (targetUser.isOnline) { %>
                  <span class="online">ออนไลน์</span>
                  <% } else { %>
                    <span class="offline">ออฟไลน์</span>
                    <% } %>
              </div>
            </div>
          </div>
          <div class="chat-con" id="chat-sec1">
            <div class="messages" id="messages">
              <% let previousDate=null; %>
                <% messages.forEach((msg)=> { %>
                  <% const messageDate=new Date(msg.createdAt); %>
                    <% if (previousDate===null || isNewDay(previousDate, messageDate)) { %>
                      <div class="date-divider">
                        <div class="message-date">
                          <%= formatDate(messageDate) %>
                        </div>
                      </div>
                      <% } %>
                        <% previousDate=messageDate; %>
                          <div
                            class="message <%= msg.userId._id.toString() === user._id.toString() ? 'current-user' : 'other-user' %>"
                            data-message-id="<%= msg._id %>">
                            <% if (msg.userId._id.toString() !==user._id.toString()) { %>
                              <img src="<%= msg.userId.profileImage || '/path/to/default/avatar.png' %>" alt="User"
                                class="avatar">
                              <% } %>
                                <div class="message-bubble">
                                  <% if (msg.userId._id.toString() !==user._id.toString()) { %>
                                    <div id="chat-nameuser">
                                      <%= msg.userId.firstName %>
                                        <%= msg.userId.lastName %>
                                    </div>
                                    <% } %>
                                      <%= msg.message %>
                                        <div class="message-time">
                                          <%= formatTime(messageDate) %>
                                            <% if (msg.userId._id.toString()===user._id.toString()) { %>
                                              <span class="read-status">เห็นแล้ว: <%= msg.readBy.length %> คน</span>
                                              <% } %>
                                        </div>
                                </div>
                          </div>
                          <% }); %>
            </div>
          </div>
          <div class="btn-new-message">
            <button class="new-message-btn">
              <i class='bx bxs-chevron-down'></i>
            </button>
          </div>
          <div class="chat-formsubmit" id="chat-sec">
            <form class="chat-form" id="chatForm">
              <div class="chaticon">
                <div class="chat-img" id="icon-chat"><i class='bx bx-image-alt'></i></div>
                <div class="chat-file" id="icon-chat"><i class='bx bx-paperclip'></i></div>
              </div>
              <input type="text" id="messageInput" name="message" placeholder="พิมพ์ข้อความ..." required
                autocomplete="off">
              <button type="submit"><i class='bx bx-send' style='color:#ffffff'></i></button>
            </form>
          </div>
        </div>
    </div>
  </div>

  <script>
    // เมื่อโหลดหน้าเว็บเสร็จ
    document.addEventListener('DOMContentLoaded', () => {
      // ตรวจสอบ URL ปัจจุบันเพื่อกำหนด active item
      const path = window.location.pathname;
      const chatItems = document.querySelectorAll('.user-list li');

      chatItems.forEach(item => {
        // ลบคลาส active ออกจากทั้งหมดก่อน
        item.classList.remove('active');

        // ตรวจสอบว่าเป็นลิงก์ปัจจุบันหรือไม่
        const link = item.querySelector('a');
        if (link && link.getAttribute('href') === path) {
          item.classList.add('active');
        }
      });
    });

    // เมื่อคลิกที่รายการแชท
    document.querySelectorAll('.user-list li').forEach(item => {
      item.addEventListener('click', function () {
        // ลบคลาส active ออกจากทั้งหมด
        document.querySelectorAll('.user-list li').forEach(li => {
          li.classList.remove('active');
        });

        // เพิ่มคลาส active ให้กับรายการที่คลิก
        this.classList.add('active');
      });
    });
  </script>

  <script>
    socket.on('update last group message', (message) => {
      console.log('🔄 อัปเดตข้อความล่าสุดของแชทกลุ่ม:', message);

      // ตรวจสอบว่ามีข้อมูลที่จำเป็นครบถ้วน
      if (!message || !message.spaceId) {
        console.error('ข้อมูลข้อความไม่ครบถ้วน:', message);
        return;
      }

      // หา li ที่เป็นของแชทกลุ่ม
      const groupChatElement = document.querySelector('li[data-space-id="' + message.spaceId + '"] .conuser');
      const groupTimeElement = document.querySelector('li[data-space-id="' + message.spaceId + '"] .timemessage');

      if (groupChatElement) {
        // ตรวจสอบว่ามี userId ในข้อความหรือไม่
        if (message.userId && message.userId._id && message.userId._id.toString() === '<%= user._id %>') {
          groupChatElement.textContent = 'คุณ: ' + (message.message || 'ไม่มีข้อความล่าสุด');
        } else {
          // ถ้าไม่มีข้อมูลผู้ส่ง หรือไม่ใช่ผู้ใช้ปัจจุบัน
          const senderName = message.userId ? message.userId.firstName + ': ' : '';
          groupChatElement.textContent = senderName + (message.message || 'ไม่มีข้อความล่าสุด');
        }
      }

      if (groupTimeElement && message.createdAt) {
        groupTimeElement.textContent = formatTime(new Date(message.createdAt));
      }
    });

    socket.on('update last private message', (message) => {
      console.log('🔄 อัปเดตข้อความล่าสุดของแชทส่วนตัว:', message);

      // ตรวจสอบว่ามีข้อมูลที่จำเป็นครบถ้วน
      if (!message || !message.userId || !message.targetUserId) {
        console.error('ข้อมูลข้อความไม่ครบถ้วน:', message);
        return;
      }

      // หา userId ของผู้สนทนา
      const otherUserId = message.userId._id && message.userId._id.toString() === '<%= user._id %>'
        ? (message.targetUserId._id || '').toString()
        : (message.userId._id || '').toString();

      // หา li ที่เป็นของแชทเดี่ยว
      const privateChatElement = document.querySelector('li[data-user-id="' + otherUserId + '"] .conuser');
      const privateTimeElement = document.querySelector('li[data-user-id="' + otherUserId + '"] .timemessage');

      if (privateChatElement) {
        if (message.userId._id && message.userId._id.toString() === '<%= user._id %>') {
          privateChatElement.textContent = 'คุณ: ' + (message.message || '');
        } else {
          privateChatElement.textContent = message.message || '';
        }
      }
      if (privateTimeElement && message.createdAt) {
        privateTimeElement.textContent = formatTime(new Date(message.createdAt));
      }
    });
  </script>

  <script>
    // ฟังก์ชันสำหรับจัดรูปแบบเวลาเป็น PM/AM
    function formatTime(date) {
      let hours = date.getHours();
      let minutes = date.getMinutes();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12;
      hours = hours ? hours : 12; // ชั่วโมง 0 จะเป็น 12 AM
      minutes = minutes < 10 ? '0' + minutes : minutes;
      return `${hours}:${minutes} ${ampm}`;
    }

    // ฟังก์ชันสำหรับตรวจสอบการเปลี่ยนวัน
    function isNewDay(date1, date2) {
      return (
        date1.getFullYear() !== date2.getFullYear() ||
        date1.getMonth() !== date2.getMonth() ||
        date1.getDate() !== date2.getDate()
      );
    }

    // ฟังก์ชันสำหรับจัดรูปแบบวันที่
    function formatDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return date.toLocaleDateString('th-TH', options);
    }

    // เมื่อผู้ใช้อยู่ในหน้าแชทส่วนตัว
    socket.emit('user in private chat', {
      userId: '<%= user._id %>',
      targetUserId: '<%= targetUser._id %>',
      spaceId: '<%= spaces._id %>'
    });

    // เมื่อผู้ใช้ออกจากหน้าแชทส่วนตัว
    window.addEventListener('beforeunload', () => {
      socket.emit('user left private chat', {
        userId: '<%= user._id %>',
        targetUserId: '<%= targetUser._id %>',
        spaceId: '<%= spaces._id %>'
      });
    });



    // ส่งข้อความส่วนตัว
    document.getElementById('chatForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const message = document.getElementById('messageInput').value;
      socket.emit('send private message', {
        spaceId: '<%= spaces._id %>',
        message,
        userId: '<%= user._id %>',
        targetUserId: '<%= targetUser._id %>'
      });
      document.getElementById('messageInput').value = '';
    });

    // รับสถานะข้อความที่ถูกอ่าน
    socket.on('private message read', (data) => {
      const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
      if (messageElement) {
        const readStatusElement = messageElement.querySelector('.read-status');
        if (readStatusElement) {
          readStatusElement.textContent = `เห็นแล้ว: ${data.readByCount} คน`;
        }
      }
    });
  </script>

  <script>
    const messagesContainer = document.getElementById("messages");
    const newMessageButton = document.querySelector('.new-message-btn');
    const chatSecRight = document.querySelector('.chat-secright');

    let userScrolledUp = false;
    let lastScrollPosition = localStorage.getItem('lastScrollPosition') || messagesContainer.scrollHeight;

    messagesContainer.scrollTop = lastScrollPosition;
    function checkScrollPosition() {
      const nearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop <= messagesContainer.clientHeight + 50;
      if (!nearBottom) {
        newMessageButton.classList.add("show");
      } else {
        newMessageButton.classList.remove("show");
      }
    }

    messagesContainer.addEventListener("scroll", checkScrollPosition);

    newMessageButton.addEventListener("click", () => {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      newMessageButton.classList.remove("show");
    });


    // บันทึกตำแหน่งการเลื่อน
    function saveScrollPosition() {
      localStorage.setItem(`chatScroll_<%= spaces._id %>_<%= targetUser._id %>`, messagesContainer.scrollTop);
    }

    // กู้คืนตำแหน่งการเลื่อนเมื่อโหลดหน้า
    function restoreScrollPosition() {
      const savedPosition = localStorage.getItem(`chatScroll_<%= spaces._id %>_<%= targetUser._id %>`);
      if (savedPosition) {
        messagesContainer.scrollTop = parseInt(savedPosition);
      } else {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    }

    // เรียกใช้เมื่อโหลดหน้า
    restoreScrollPosition();
    checkScrollPosition();

    // จัดการเหตุการณ์การเลื่อน
    messagesContainer.addEventListener("scroll", () => {
      checkScrollPosition();
      saveScrollPosition();
    });

    // เมื่อคลิกปุ่มเลื่อนลงล่าง
    newMessageButton.addEventListener("click", () => {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      newMessageButton.classList.remove("show");
      saveScrollPosition();
    });

    // บันทึกตำแหน่งเมื่อเปลี่ยนแท็บหรือปิดหน้าต่าง
    window.addEventListener("beforeunload", saveScrollPosition);
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === 'hidden') {
        saveScrollPosition();
      }
    });

    // แก้ไขส่วนรับข้อความใหม่
    socket.on('private message', (msg) => {
      const messagesContainer = document.getElementById('messages');
      const messageDate = new Date(msg.createdAt);

      // ตรวจสอบการเปลี่ยนวัน
      const lastMessage = messagesContainer.lastElementChild;
      if (lastMessage && lastMessage.classList.contains('message')) {
        const lastMessageDate = new Date(lastMessage.dataset.timestamp);
        if (isNewDay(lastMessageDate, messageDate)) {
          const dateDivider = document.createElement('div');
          dateDivider.classList.add('date-divider');
          dateDivider.textContent = formatDate(messageDate);
          messagesContainer.appendChild(dateDivider);
        }
      }

      // สร้าง element สำหรับข้อความใหม่
      const messageElement = document.createElement('div');
      messageElement.classList.add('message', msg.userId._id === '<%= user._id %>' ? 'current-user' : 'other-user');
      messageElement.dataset.messageId = msg._id;
      messageElement.dataset.timestamp = msg.createdAt;

      messageElement.innerHTML = msg.userId._id !== '<%= user._id %>' ? `
      <img src="${msg.userId.profileImage}" alt="User" class="avatar">
      <div class="message-bubble">
        <div id="chat-nameuser">${msg.userId.firstName} ${msg.userId.lastName}</div>
        ${msg.message}
        <div class="message-time">${formatTime(messageDate)}</div>
      </div>
    ` : `
      <div class="message-bubble">
        ${msg.message}
        <div class="message-time">
          ${formatTime(messageDate)}
          <span class="read-status">เห็นแล้ว: ${msg.readBy.length} คน</span>
        </div>
      </div>
    `;

      messagesContainer.appendChild(messageElement);

      // เลื่อนลงล่างเฉพาะเมื่อผู้ใช้ไม่ได้เลื่อนขึ้นดูข้อความเก่า
      const nearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop <= messagesContainer.clientHeight + 100;
      if (nearBottom) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
      saveScrollPosition();

      // อัปเดตสถานะ active เมื่อได้รับข้อความใหม่
      document.querySelectorAll('.user-list li').forEach(li => {
        li.classList.remove('active');

        // ตรวจสอบว่าเป็นแชทกับผู้ส่งข้อความหรือไม่
        const userId = li.dataset.userId;
        if (userId &&
          (userId === msg.userId._id.toString() ||
            userId === msg.targetUserId.toString())) {
          li.classList.add('active');
        }
      });
      if (window.location.pathname !== `/space/item/${msg.spaceId}/chat/private/${msg.userId._id}`) {
        fetchUnreadCounts();
      }
    });
  </script>

  <script>
    // ฟังก์ชันดึงจำนวนข้อความที่ยังไม่อ่าน
    async function fetchUnreadCounts() {
      try {
        const spaceId = '<%= spaces._id %>';
        const userId = '<%= user._id %>';
        const path = window.location.pathname;

        // ดึงข้อมูลจำนวนข้อความที่ยังไม่อ่านในแชทกลุ่ม
        const groupResponse = await fetch(`/space/item/${spaceId}/chat/unread-count`);
        const groupData = await groupResponse.json();

        const groupChatElement = document.querySelector('li[data-space-id="' + spaceId + '"]');
        if (groupChatElement) {
          const notiElement = groupChatElement.querySelector('.notimesaage');

          // ตรวจสอบว่าผู้ใช้กำลังอยู่ในหน้าแชทกลุ่มหรือไม่
          const isInGroupChat = path === `/space/item/${spaceId}/chat`;

          if (groupData.unreadCount > 0 && !isInGroupChat) {
            groupChatElement.classList.add('unread');
            notiElement.textContent = groupData.unreadCount;
            notiElement.style.display = 'flex';
          } else {
            groupChatElement.classList.remove('unread');
            notiElement.style.display = 'none';
          }
        }

        // ดึงข้อมูลจำนวนข้อความที่ยังไม่อ่านในแชทส่วนตัว
        const collaborators = document.querySelectorAll('li[data-user-id]');
        collaborators.forEach(async (collab) => {
          const targetUserId = collab.dataset.userId;
          const privateResponse = await fetch(`/space/item/${spaceId}/chat/private/${targetUserId}/unread-count`);
          const privateData = await privateResponse.json();

          if (privateData.success) {
            const notiElement = collab.querySelector('.notimesaage');

            // ตรวจสอบว่าผู้ใช้กำลังอยู่ในแชทส่วนตัวกับผู้ใช้นี้หรือไม่
            const isInPrivateChat = path === `/space/item/${spaceId}/chat/private/${targetUserId}`;

            if (privateData.unreadCount > 0 && !isInPrivateChat) {
              collab.classList.add('unread');
              notiElement.textContent = privateData.unreadCount;
              notiElement.style.display = 'flex';
            } else {
              collab.classList.remove('unread');
              notiElement.style.display = 'none';
            }
          }
        });

      } catch (error) {
        console.error('Error fetching unread counts:', error);
      }
    }

    // ฟังก์ชันทำเครื่องหมายข้อความว่าอ่านแล้ว
    async function markMessagesAsRead() {
      const path = window.location.pathname;
      const spaceId = '<%= spaces._id %>';
      const userId = '<%= user._id %>';

      try {
        // ตรวจสอบว่าเป็นแชทส่วนตัวหรือไม่
        const privateChatMatch = path.match(/\/space\/item\/[^/]+\/chat\/private\/([^/]+)/);

        if (privateChatMatch) {
          // แชทส่วนตัว - ทำเครื่องหมายว่าอ่านแล้ว
          const targetUserId = privateChatMatch[1];
          await fetch(`/space/item/${spaceId}/chat/private/${targetUserId}/mark-as-read`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
          });
        } else {
          // แชทกลุ่ม - ทำเครื่องหมายว่าอ่านแล้ว
          await fetch(`/space/item/${spaceId}/chat/mark-group-read`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
          });
        }

        // อัปเดตสถานะเฉพาะแชทที่เปิดอยู่เท่านั้น
        const currentChatElement = document.querySelector('.user-list li.active');
        if (currentChatElement) {
          const notiElement = currentChatElement.querySelector('.notimesaage');
          if (notiElement) {
            notiElement.style.display = 'none';
            currentChatElement.classList.remove('unread');
          }
        }
      } catch (error) {
        console.error('Error marking messages as read:', error);
      }
    }

    // เรียกใช้เมื่อโหลดหน้า
    document.addEventListener('DOMContentLoaded', () => {
      // เรียกฟังก์ชันตรวจสอบ unread messages โดยไม่ mark as read ทันที
      fetchUnreadCounts();

      // เรียก mark as read เฉพาะเมื่อผู้ใช้คลิกที่แชท
      document.querySelectorAll('.user-list li').forEach(item => {
        item.addEventListener('click', function () {
          // ตรวจสอบว่าไม่ใช่การคลิกที่แชทเดิม
          if (!this.classList.contains('active')) {
            setTimeout(markMessagesAsRead, 300);
          }
        });
      });
    });

    // อัปเดตเมื่อมีข้อความใหม่
    socket.on('new message', () => {
      const path = window.location.pathname;
      const spaceId = '<%= spaces._id %>';

      // ตรวจสอบว่าข้อความใหม่ไม่ใช่ในแชทที่กำลังเปิดอยู่
      if (!path.includes('/chat/private/') && !path.endsWith('/chat')) {
        fetchUnreadCounts();
      }
    });

    socket.on('update last group message', (message) => {
      // อัปเดตเฉพาะถ้าไม่ใช่แชทกลุ่มที่กำลังเปิดอยู่
      if (!window.location.pathname.endsWith('/chat')) {
        fetchUnreadCounts();
      }
    });

    socket.on('update last private message', (message) => {
      const path = window.location.pathname;
      const targetUserId = message.userId._id.toString() === '<%= user._id %>'
        ? message.targetUserId._id.toString()
        : message.userId._id.toString();

      // อัปเดตเฉพาะถ้าไม่ใช่แชทส่วนตัวที่กำลังเปิดอยู่
      if (!path.includes(`/chat/private/${targetUserId}`)) {
        fetchUnreadCounts();
      }
    });
  </script>
  <script>
    // ฟังก์ชันค้นหาชื่อแชท
    document.getElementById('searchChatInput').addEventListener('input', function (e) {
      const searchTerm = e.target.value.toLowerCase();
      const chatItems = document.querySelectorAll('.all-chat li');

      chatItems.forEach(item => {
        const chatName = item.querySelector('.nameuser').textContent.toLowerCase();
        if (chatName.includes(searchTerm)) {
          item.style.display = 'flex';
        } else {
          item.style.display = 'none';
        }
      });
    });

    // เพิ่มสไตล์ CSS สำหรับการค้นหา
    const style = document.createElement('style');
    style.textContent = `
          .search-chatmember {
            padding: 0 16px;
            margin-bottom: 8px;
          }
          .search-chatmember input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,.25);
          }
        `;
    document.head.appendChild(style);
  </script>

